{"version":3,"sources":["webpack:///./src/external_app/external_messaging.ts","webpack:///./src/external_app/external_events_forwarder.ts","webpack:///./src/external_app/external_auth.ts"],"names":["ExternalMessaging","bus","this","window","addEventListener","ev","fireMessage","type","payload","event","detail","hapticType","externalForwardHaptics","msg","receiveMessage","msgId","id","Promise","resolve","reject","commands","_sendExternal","pendingCmd","success","result","error","console","warn","externalApp","externalBus","JSON","stringify","webkit","messageHandlers","postMessage","Error","ExternalAuth","hassUrl","clientId","refresh_token","access_token","expires_in","expires","callbackPayload","callback","callbackPromise","data","getExternalAuth","tokens","Date","now","revokeExternalAuth","Auth","createExternalAuth","auth","external","attach"],"mappings":"wYAKA,IAkCaA,EAAb,yB,4FAAA,2BAC0D,IAD1D,eAEyC,IAFzC,eAGiB,G,UAHjB,O,EAAA,G,EAAA,gCAKkB,IC1C8BC,ED0C9B,OC1C8BA,ED2CZC,KC1ClCC,OAAOC,iBAAiB,qBAAqB,SAACC,GAAD,OAC3CJ,EAAIK,YAAY,CACdC,KAAM,oBACNC,QAAS,CAAEC,MAAOJ,EAAGK,aAKW,SAACT,GACrCE,OAAOC,iBAAiB,UAAU,SAACC,GAAD,OAChCJ,EAAIK,YAAY,CAAEC,KAAM,SAAUC,QAAS,CAAEG,WAAYN,EAAGK,aDiC5DE,CAAuBV,MACvBC,OAAM,YAA0B,SAACU,GAAD,OAAS,EAAKC,eAAeD,MARjE,kCAewBA,GAAkC,WAChDE,IAAUb,KAAKa,MAKrB,OAJAF,EAAIG,GAAKD,EAETb,KAAKI,YAAYO,GAEV,IAAII,SAAW,SAACC,EAASC,GAC9B,EAAKC,SAASL,GAAS,CAAEG,UAASC,eAtBxC,kCA8BqBN,GACZA,EAAIG,KACPH,EAAIG,KAAOd,KAAKa,OAElBb,KAAKmB,cAAcR,KAlCvB,qCAqCwBA,GAMpB,IAAMS,EAAapB,KAAKkB,SAASP,EAAIG,IAEhCM,EAMY,WAAbT,EAAIN,OACFM,EAAIU,QACND,EAAWJ,QAAQL,EAAIW,QAEvBF,EAAWH,OAAON,EAAIY,QARxBC,QAAQC,KAAR,0BAAwCd,EAAIG,MA/ClD,oCA4D0BH,GAKlBV,OAAOyB,YACTzB,OAAOyB,YAAYC,YAAYC,KAAKC,UAAUlB,IAE9CV,OAAO6B,OAAQC,gBAAgBJ,YAAYK,YAAYrB,Q,2BApE7D,K,sxBEEA,IAAKV,OAAOyB,cAAgBzB,OAAO6B,OACjC,MAAM,IAAIG,MACR,iF,IAIEC,E,YAGJ,WAAYC,GAAiB,M,MAAA,O,4FAAA,SAC3B,E,qEAAA,qBAAM,CACJA,UACAC,SAAU,GACVC,cAAe,GACfC,aAAc,GACdC,WAAY,EAEZC,QAAS,K,EARgB,K,OAAA,G,EAAA,c,wFAAA,E,8YAarBC,EAAkB,CAAEC,SAzDH,wBA2DjBC,EAAkB,IAAI5B,SAC1B,SAACC,EAASC,GACRhB,OAAM,qBAAuB,SAACoB,EAASuB,GAAV,OAC3BvB,EAAUL,EAAQ4B,GAAQ3B,EAAO2B,O,kCAIjC,G,cAEF3C,OAAOyB,YACTzB,OAAOyB,YAAYmB,gBAAgBjB,KAAKC,UAAUY,IAElDxC,OAAO6B,OAAQC,gBAAgBc,gBAAgBb,YAC7CS,G,kCAIiBE,G,OAAfG,E,OAEN9C,KAAK4C,KAAKN,aAAeQ,EAAOR,aAChCtC,KAAK4C,KAAKJ,QAA8B,IAApBM,EAAOP,WAAoBQ,KAAKC,M,iLAI9CP,EAAkB,CAAEC,SAlFA,2BAoFpBC,EAAkB,IAAI5B,SAAQ,SAACC,EAASC,GAC5ChB,OAAM,wBAA0B,SAACoB,EAASuB,GAAV,OAC9BvB,EAAUL,EAAQ4B,GAAQ3B,EAAO2B,O,kCAG/B,G,cAEF3C,OAAOyB,YACTzB,OAAOyB,YAAYuB,mBAAmBrB,KAAKC,UAAUY,IAErDxC,OAAO6B,OAAQC,gBAAgBkB,mBAAmBjB,YAChDS,G,kCAIEE,G,wEA3DiBO,KA+DdC,EAAqB,SAAChB,GACjC,IAAMiB,EAAO,IAAIlB,EAAaC,GAQ9B,OANGlC,OAAOyB,aAAezB,OAAOyB,YAAYC,aACzC1B,OAAO6B,QAAU7B,OAAO6B,OAAOC,gBAAgBJ,eAEhDyB,EAAKC,SAAW,IAAIvD,EACpBsD,EAAKC,SAASC,UAETF","file":"chunk.3dfbe65add3bfe8a4613.js","sourcesContent":["import {\n  externalForwardConnectionEvents,\n  externalForwardHaptics,\n} from \"./external_events_forwarder\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: ExternalError) => void;\n}\n\nexport interface InternalMessage {\n  id?: number;\n  type: string;\n  payload?: unknown;\n}\n\ninterface ExternalError {\n  code: string;\n  message: string;\n}\n\ninterface ExternalMessageResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ExternalMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: ExternalError;\n}\n\ntype ExternalMessage = ExternalMessageResult | ExternalMessageResultError;\n\nexport class ExternalMessaging {\n  public commands: { [msgId: number]: CommandInFlight } = {};\n  public cache: { [key: string]: any } = {};\n  public msgId = 0;\n\n  public attach() {\n    externalForwardConnectionEvents(this);\n    externalForwardHaptics(this);\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T>(msg: InternalMessage): Promise<T> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this.fireMessage(msg);\n\n    return new Promise<T>((resolve, reject) => {\n      this.commands[msgId] = { resolve, reject };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: InternalMessage) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: ExternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // tslint:disable-next-line: no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: InternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n","import { ExternalMessaging } from \"./external_messaging\";\n\nexport const externalForwardConnectionEvents = (bus: ExternalMessaging) => {\n  window.addEventListener(\"connection-status\", (ev) =>\n    bus.fireMessage({\n      type: \"connection-status\",\n      payload: { event: ev.detail },\n    })\n  );\n};\n\nexport const externalForwardHaptics = (bus: ExternalMessaging) =>\n  window.addEventListener(\"haptic\", (ev) =>\n    bus.fireMessage({ type: \"haptic\", payload: { hapticType: ev.detail } })\n  );\n","/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging, InternalMessage } from \"./external_messaging\";\n\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\n\ninterface BasePayload {\n  callback: string;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  expires_in: number;\n}\n\ndeclare global {\n  interface Window {\n    externalApp?: {\n      getExternalAuth(payload: string);\n      revokeExternalAuth(payload: string);\n      externalBus(payload: string);\n    };\n    webkit?: {\n      messageHandlers: {\n        getExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        revokeExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        externalBus: {\n          postMessage(payload: InternalMessage);\n        };\n      };\n    };\n  }\n}\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\n    \"External auth requires either externalApp or webkit defined on Window object.\"\n  );\n}\n\nclass ExternalAuth extends Auth {\n  public external?: ExternalMessaging;\n\n  constructor(hassUrl: string) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    });\n  }\n\n  public async refreshAccessToken() {\n    const callbackPayload = { callback: CALLBACK_SET_TOKEN };\n\n    const callbackPromise = new Promise<RefreshTokenResponse>(\n      (resolve, reject) => {\n        window[CALLBACK_SET_TOKEN] = (success, data) =>\n          success ? resolve(data) : reject(data);\n      }\n    );\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.getExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    const tokens = await callbackPromise;\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n  }\n\n  public async revoke() {\n    const callbackPayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    const callbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) =>\n        success ? resolve(data) : reject(data);\n    });\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.revokeExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    await callbackPromise;\n  }\n}\n\nexport const createExternalAuth = (hassUrl: string) => {\n  const auth = new ExternalAuth(hassUrl);\n  if (\n    (window.externalApp && window.externalApp.externalBus) ||\n    (window.webkit && window.webkit.messageHandlers.externalBus)\n  ) {\n    auth.external = new ExternalMessaging();\n    auth.external.attach();\n  }\n  return auth;\n};\n"],"sourceRoot":""}