{"version":3,"sources":["webpack:///./src/cast/cast_framework.ts","webpack:///./src/cast/cast_manager.ts"],"names":["loadedPromise","managerProm","CastManager","auth","this","context","castContext","setOptions","receiverApplicationId","CAST_APP_ID","autoJoinPolicy","chrome","cast","AutoJoinPolicy","ORIGIN_SCOPED","addEventListener","framework","CastContextEventType","SESSION_STATE_CHANGED","ev","_sessionStateChanged","CAST_STATE_CHANGED","_castStateChanged","event","listener","_eventListeners","push","splice","indexOf","msg","castSession","sendMessage","CAST_NS","requestSession","type","status","_fireEvent","sessionState","castSendAuth","_attachMessageListener","undefined","addMessageListener","_ns","_receiveMessage","JSON","parse","connected","hassUrl","data","CAST_DEV","CAST_DEV_HASS_URL","getCastState","CastContext","getInstance","getCurrentSession","getCastManager","Promise","resolve","window","__onGCastApiAvailable","el","document","createElement","id","body","append","loadJS","castApiAvailable","then","isAvailable","Error"],"mappings":"mGAEIA,ECaAC,E,4ZAoBG,IAAMC,EAAb,WAME,WAAYC,GAAa,Y,4FAAA,gFAF2C,IAGlEC,KAAKD,KAAOA,EACZ,IAAME,EAAUD,KAAKE,YACrBD,EAAQE,WAAW,CACjBC,sBAAuBC,IAEvBC,eAAgBC,OAAOC,KAAKC,eAAeC,gBAE7CT,EAAQU,iBACNH,KAAKI,UAAUC,qBAAqBC,uBACpC,SAACC,GAAD,OAAQ,EAAKC,qBAAqBD,MAEpCd,EAAQU,iBACNH,KAAKI,UAAUC,qBAAqBI,oBACpC,SAACF,GAAD,OAAQ,EAAKG,kBAAkBH,M,UApBrC,O,EAAA,G,EAAA,wCAwB0BI,EAAkBC,GAA6B,WAMrE,OALMD,KAASnB,KAAKqB,kBAClBrB,KAAKqB,gBAAgBF,GAAS,IAEhCnB,KAAKqB,gBAAgBF,GAAOG,KAAKF,GAE1B,WACL,EAAKC,gBAAgBF,GAAOI,OAC1B,EAAKF,gBAAgBF,GAAOK,QAAQJ,OAhC5C,kCA+CqBK,GAIjBzB,KAAK0B,YAAYC,YAAYC,IAASH,KAnD1C,uCAmEI,OAAOzB,KAAKE,YAAY2B,mBAnE5B,iCAsEqBV,GAAkB,2BACnC,aAAuBnB,KAAKqB,gBAAgBF,IAAU,IAAtD,gDACEC,EADwD,WADvB,qFAtEvC,sCA4E0BK,GAIL,oBAAbA,EAAIK,OACN9B,KAAK+B,OAASN,EACdzB,KAAKgC,WAAW,yBAlFtB,2CAsF+BjB,GAOL,oBAApBA,EAAGkB,cACiB,oBAApBlB,EAAGkB,cAECjC,KAAKD,KACPmC,YAAalC,KAAMA,KAAKD,MAGxBC,KAAK2B,YAAY,CAAEG,KAAM,eAE3B9B,KAAKmC,0BACwB,kBAApBpB,EAAGkB,eACZjC,KAAK+B,YAASK,EACdpC,KAAKgC,WAAW,yBAzGtB,wCA6G4BjB,GAIxBf,KAAKgC,WAAW,mBAjHpB,+CAoHmC,WACfhC,KAAK0B,YACbW,mBAAmBT,KAAS,SAACU,EAAKb,GAAN,OAClC,EAAKc,gBAAgBC,KAAKC,MAAMhB,SAvHtC,6CAsCI,YACkBW,IAAhBpC,KAAK+B,aACSK,IAAdpC,KAAKD,MACLC,KAAK+B,OAAOW,YACX1C,KAAK+B,OAAOY,UAAY3C,KAAKD,KAAK6C,KAAKD,SACrCE,KAAY7C,KAAK+B,OAAOY,UAAYG,OA3C7C,gCAuDI,OAAO9C,KAAKE,YAAY6C,iBAvD5B,kCA2DI,OAAOvC,KAAKI,UAAUoC,YAAYC,gBA3DtC,kCA+DI,OAAOjD,KAAKE,YAAYgD,yB,2BA/D5B,KA4HaC,EAAiB,SAACpD,GAS7B,OARKF,IACHA,ED7J4B,WAC9B,GAAID,EACF,OAAOA,EAGTA,EAAgB,IAAIwD,SAAQ,SAACC,GAC1BC,OAAeC,sBAAwBF,KAK1C,IAAMG,EAAKC,SAASC,cAAc,OAOlC,OANAF,EAAGG,GAAK,OACRF,SAASG,KAAKC,OAAOL,GAErBM,YACE,8EAEKlE,EC2ISmE,GAAmBC,MAAK,SAACC,GACrC,IAAKA,EACH,MAAM,IAAIC,MAAM,yBAElB,OAAO,IAAIpE,EAAYC,OAGpBF","file":"chunk.3995e2cb2670938494c3.js","sourcesContent":["import { loadJS } from \"../common/dom/load_resource\";\n\nlet loadedPromise: Promise<boolean> | undefined;\n\nexport const castApiAvailable = () => {\n  if (loadedPromise) {\n    return loadedPromise;\n  }\n\n  loadedPromise = new Promise((resolve) => {\n    (window as any).__onGCastApiAvailable = resolve;\n  });\n  // Any element with a specific ID will get set as a JS variable on window\n  // This will override the cast SDK if the iconset is loaded afterwards.\n  // Conflicting IDs will no longer mess with window, so we'll just append one.\n  const el = document.createElement(\"div\");\n  el.id = \"cast\";\n  document.body.append(el);\n\n  loadJS(\n    \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\"\n  );\n  return loadedPromise;\n};\n","import { castApiAvailable } from \"./cast_framework\";\nimport { CAST_APP_ID, CAST_NS, CAST_DEV } from \"./const\";\nimport { CAST_DEV_HASS_URL } from \"./dev_const\";\nimport {\n  castSendAuth,\n  HassMessage as ReceiverMessage,\n} from \"./receiver_messages\";\nimport {\n  SessionStateEventData,\n  CastStateEventData,\n  // tslint:disable-next-line: no-implicit-dependencies\n} from \"chromecast-caf-receiver/cast.framework\";\nimport { SenderMessage, ReceiverStatusMessage } from \"./sender_messages\";\nimport { Auth } from \"home-assistant-js-websocket\";\n\nlet managerProm: Promise<CastManager> | undefined;\n\ntype CastEventListener = () => void;\n\n/*\nGeneral flow of Chromecast:\n\nChromecast sessions are started via the Chromecast button. When clicked, session\nstate changes to started. We then send authentication, which will cause the\nreceiver app to send a status update.\n\nIf a session is already active, we query the status to see what it is up to. If\na user presses the cast button we send auth if not connected yet, then send\ncommand as usual.\n*/\n\n/* tslint:disable:no-console */\n\ntype CastEvent = \"connection-changed\" | \"state-changed\";\n\nexport class CastManager {\n  public auth?: Auth;\n  // If the cast connection is connected to our Hass.\n  public status?: ReceiverStatusMessage;\n  private _eventListeners: { [event: string]: CastEventListener[] } = {};\n\n  constructor(auth?: Auth) {\n    this.auth = auth;\n    const context = this.castContext;\n    context.setOptions({\n      receiverApplicationId: CAST_APP_ID,\n      // @ts-ignore\n      autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    });\n    context.addEventListener(\n      cast.framework.CastContextEventType.SESSION_STATE_CHANGED,\n      (ev) => this._sessionStateChanged(ev)\n    );\n    context.addEventListener(\n      cast.framework.CastContextEventType.CAST_STATE_CHANGED,\n      (ev) => this._castStateChanged(ev)\n    );\n  }\n\n  public addEventListener(event: CastEvent, listener: CastEventListener) {\n    if (!(event in this._eventListeners)) {\n      this._eventListeners[event] = [];\n    }\n    this._eventListeners[event].push(listener);\n\n    return () => {\n      this._eventListeners[event].splice(\n        this._eventListeners[event].indexOf(listener)\n      );\n    };\n  }\n\n  public get castConnectedToOurHass(): boolean {\n    return (\n      this.status !== undefined &&\n      this.auth !== undefined &&\n      this.status.connected &&\n      (this.status.hassUrl === this.auth.data.hassUrl ||\n        (CAST_DEV && this.status.hassUrl === CAST_DEV_HASS_URL))\n    );\n  }\n\n  public sendMessage(msg: ReceiverMessage) {\n    if (__DEV__) {\n      console.log(\"Sending cast message\", msg);\n    }\n    this.castSession.sendMessage(CAST_NS, msg);\n  }\n\n  public get castState() {\n    return this.castContext.getCastState();\n  }\n\n  public get castContext() {\n    return cast.framework.CastContext.getInstance();\n  }\n\n  public get castSession() {\n    return this.castContext.getCurrentSession()!;\n  }\n\n  public requestSession() {\n    return this.castContext.requestSession();\n  }\n\n  private _fireEvent(event: CastEvent) {\n    for (const listener of this._eventListeners[event] || []) {\n      listener();\n    }\n  }\n\n  private _receiveMessage(msg: SenderMessage) {\n    if (__DEV__) {\n      console.log(\"Received cast message\", msg);\n    }\n    if (msg.type === \"receiver_status\") {\n      this.status = msg;\n      this._fireEvent(\"connection-changed\");\n    }\n  }\n\n  private _sessionStateChanged(ev: SessionStateEventData) {\n    if (__DEV__) {\n      console.log(\"Cast session state changed\", ev.sessionState);\n    }\n    // On Android, opening a new session always results in SESSION_RESUMED.\n    // So treat both as the same.\n    if (\n      ev.sessionState === \"SESSION_STARTED\" ||\n      ev.sessionState === \"SESSION_RESUMED\"\n    ) {\n      if (this.auth) {\n        castSendAuth(this, this.auth);\n      } else {\n        // Only do if no auth, as this is done as part of sendAuth.\n        this.sendMessage({ type: \"get_status\" });\n      }\n      this._attachMessageListener();\n    } else if (ev.sessionState === \"SESSION_ENDED\") {\n      this.status = undefined;\n      this._fireEvent(\"connection-changed\");\n    }\n  }\n\n  private _castStateChanged(ev: CastStateEventData) {\n    if (__DEV__) {\n      console.log(\"Cast state changed\", ev.castState);\n    }\n    this._fireEvent(\"state-changed\");\n  }\n\n  private _attachMessageListener() {\n    const session = this.castSession;\n    session.addMessageListener(CAST_NS, (_ns, msg) =>\n      this._receiveMessage(JSON.parse(msg))\n    );\n  }\n}\n\nexport const getCastManager = (auth?: Auth) => {\n  if (!managerProm) {\n    managerProm = castApiAvailable().then((isAvailable) => {\n      if (!isAvailable) {\n        throw new Error(\"No Cast API available\");\n      }\n      return new CastManager(auth);\n    });\n  }\n  return managerProm;\n};\n"],"sourceRoot":""}