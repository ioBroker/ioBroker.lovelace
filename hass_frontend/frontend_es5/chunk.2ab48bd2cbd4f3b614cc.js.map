{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack:///./src/panels/lovelace/editor/types.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-glance-card-editor.ts"],"names":["struct","superstruct","types","value","includes","icon","customElement","property","themes","concat","Object","keys","this","hass","sort","html","label","localize","_changed","map","theme","css","ev","target","fireEvent","LitElement","actionConfigStruct","action","navigation_path","url_path","service","service_data","entitiesConfigStruct","union","entity","name","cardConfigStruct","type","title","columns","show_name","show_state","show_icon","entities","HuiGlanceCardEditor","config","_config","_configEntities","processEditorEntities","NaN","configElementStyle","_title","_valueChanged","_theme","_columns","_show_name","_show_icon","_show_state","configValue","detail","isNaN","Number","undefined","checked"],"mappings":"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","file":"chunk.2ab48bd2cbd4f3b614cc.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"theme-changed\": undefined;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"theme-changed\": HASSDomEvent<undefined>;\n  }\n}\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n  @property() public label?: string;\n  @property() public hass?: HomeAssistant;\n\n  protected render(): TemplateResult | void {\n    const themes = [\"Backend-selected\", \"default\"].concat(\n      Object.keys(this.hass!.themes.themes).sort()\n    );\n\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n          this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.theme\") +\n            \" (\" +\n            this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            ) +\n            \")\"}\n        dynamic-align\n        @value-changed=\"${this._changed}\"\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=\"${this.value}\"\n          attr-for-selected=\"theme\"\n        >\n          ${themes.map((theme) => {\n            return html`\n              <paper-item theme=\"${theme}\">${theme}</paper-item>\n            `;\n          })}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value;\n    fireEvent(this, \"theme-changed\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import {\n  LovelaceCardConfig,\n  LovelaceViewConfig,\n  ActionConfig,\n} from \"../../../data/lovelace\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { InputType } from \"zlib\";\nimport { struct } from \"../common/structs/struct\";\n\nexport interface YamlChangedEvent extends Event {\n  detail: {\n    yaml: string;\n  };\n}\n\nexport interface ViewEditEvent extends Event {\n  detail: {\n    config: LovelaceViewConfig;\n  };\n}\n\nexport interface ConfigValue {\n  format: \"json\" | \"yaml\";\n  value?: string | LovelaceCardConfig;\n}\n\nexport interface ConfigError {\n  type: string;\n  message: string;\n}\n\nexport interface EntitiesEditorEvent {\n  detail?: {\n    entities?: EntityConfig[];\n  };\n  target?: EventTarget;\n}\n\nexport interface EditorTarget extends EventTarget {\n  value?: string;\n  index?: number;\n  checked?: boolean;\n  configValue?: string;\n  type?: InputType;\n  config: ActionConfig;\n}\n\nexport interface CardPickTarget extends EventTarget {\n  type: string;\n}\n\nexport const actionConfigStruct = struct({\n  action: \"string\",\n  navigation_path: \"string?\",\n  url_path: \"string?\",\n  service: \"string?\",\n  service_data: \"object?\",\n});\n\nexport const entitiesConfigStruct = struct.union([\n  {\n    entity: \"entity-id\",\n    name: \"string?\",\n    icon: \"icon?\",\n  },\n  \"entity-id\",\n]);\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\n\nimport \"../../../../components/entity/state-badge\";\nimport \"../../components/hui-theme-select-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-switch\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport {\n  EntitiesEditorEvent,\n  EditorTarget,\n  entitiesConfigStruct,\n} from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { GlanceCardConfig, ConfigEntity } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string|number?\",\n  theme: \"string?\",\n  columns: \"number?\",\n  show_name: \"boolean?\",\n  show_state: \"boolean?\",\n  show_icon: \"boolean?\",\n  entities: [entitiesConfigStruct],\n});\n\n@customElement(\"hui-glance-card-editor\")\nexport class HuiGlanceCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: GlanceCardConfig;\n\n  @property() private _configEntities?: ConfigEntity[];\n\n  public setConfig(config: GlanceCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"Backend-selected\";\n  }\n\n  get _columns(): number {\n    return this._config!.columns || NaN;\n  }\n\n  get _show_name(): boolean {\n    return this._config!.show_name || true;\n  }\n\n  get _show_icon(): boolean {\n    return this._config!.show_icon || true;\n  }\n\n  get _show_state(): boolean {\n    return this._config!.show_state || true;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=\"${this._title}\"\n          .configValue=\"${\"title\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <hui-theme-select-editor\n            .hass=\"${this.hass}\"\n            .value=\"${this._theme}\"\n            .configValue=\"${\"theme\"}\"\n            @theme-changed=\"${this._valueChanged}\"\n          ></hui-theme-select-editor>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.glance.columns\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=\"${this._columns}\"\n            .configValue=\"${\"columns\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n        </div>\n        <div class=\"side-by-side\">\n          <ha-switch\n            ?checked=\"${this._show_name !== false}\"\n            .configValue=\"${\"show_name\"}\"\n            @change=\"${this._valueChanged}\"\n            >${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.show_name\"\n            )}</ha-switch\n          >\n          <ha-switch\n            ?checked=\"${this._show_icon !== false}\"\n            .configValue=\"${\"show_icon\"}\"\n            @change=\"${this._valueChanged}\"\n            >${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.show_icon\"\n            )}</ha-switch\n          >\n          <ha-switch\n            ?checked=\"${this._show_state !== false}\"\n            .configValue=\"${\"show_state\"}\"\n            @change=\"${this._valueChanged}\"\n            >${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.show_state\"\n            )}</ha-switch\n          >\n        </div>\n      </div>\n      <hui-entity-editor\n        .hass=\"${this.hass}\"\n        .entities=\"${this._configEntities}\"\n        @entities-changed=\"${this._valueChanged}\"\n      ></hui-entity-editor>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (target.configValue && this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (ev.detail && ev.detail.entities) {\n      this._config.entities = ev.detail.entities;\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (\n        target.value === \"\" ||\n        (target.type === \"number\" && isNaN(Number(target.value)))\n      ) {\n        delete this._config[target.configValue!];\n      } else {\n        let value: any = target.value;\n        if (target.type === \"number\") {\n          value = Number(value);\n        }\n        this._config = {\n          ...this._config,\n          [target.configValue!]:\n            target.checked !== undefined ? target.checked : value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-glance-card-editor\": HuiGlanceCardEditor;\n  }\n}\n"],"sourceRoot":""}