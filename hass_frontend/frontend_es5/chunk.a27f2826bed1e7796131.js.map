{"version":3,"sources":["webpack:///./src/panels/config/cloud/google-assistant/cloud-google-assistant.ts","webpack:///./src/data/google_assistant.ts"],"names":["configIsExposed","config","undefined","should_expose","customElement","CloudGoogleAssistant","property","memoizeOne","filter","generateFilter","include_domains","include_entities","exclude_domains","exclude_entities","this","_entities","html","emptyFilter","isEmptyFilter","cloudStatus","google_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","has","push","_showMoreInfo","traits","map","trait","substr","lastIndexOf","join","_exposeChanged","localize","might_2fa","Boolean","disable_2fa","_disable2FAChanged","narrow","_openDomainToggler","length","changedProps","_fetchData","prefs","google_entity_configs","callWS","type","entities","sort","a","b","stateA","stateB","compare","computeStateName","ev","entityId","currentTarget","fireEvent","newExposed","target","checked","_updateExposed","curExposed","_updateConfig","_ensureEntitySync","newDisable2FA","curDisable2FA","values","updateCloudGoogleEntityConfig","updatedConfig","_ensureStatusReload","showDomainTogglerDialog","domains","computeDomain","value","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","showToast","message","cloudSyncGoogleAssistant","css","LitElement"],"mappings":"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","file":"chunk.a27f2826bed1e7796131.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport \"@polymer/paper-icon-button\";\n\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/entity/state-info\";\nimport \"../../../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudGoogleEntityConfig,\n  cloudSyncGoogleAssistant,\n  GoogleEntityConfig,\n} from \"../../../../data/cloud\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showToast } from \"../../../../util/toast\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport {\n  GoogleEntity,\n  fetchCloudGoogleEntities,\n} from \"../../../../data/google_assistant\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../../components/ha-switch\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\n\nconst configIsExposed = (config: GoogleEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-google-assistant\")\nclass CloudGoogleAssistant extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public cloudStatus!: CloudStatusLoggedIn;\n  @property() public narrow!: boolean;\n  @property() private _entities?: GoogleEntity[];\n  @property()\n  private _entityConfigs: CloudPreferences[\"google_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.google_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.google_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.traits\n                .map((trait) => trait.substr(trait.lastIndexOf(\".\") + 1))\n                .join(\", \")}\n            </state-info>\n            <ha-switch\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @change=${this._exposeChanged}\n            >\n              ${this.hass!.localize(\"ui.panel.config.cloud.google.expose\")}\n            </ha-switch>\n            ${entity.might_2fa\n              ? html`\n                  <ha-switch\n                    .entityId=${entity.entity_id}\n                    .checked=${Boolean(config.disable_2fa)}\n                    @change=${this._disable2FAChanged}\n                  >\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.disable_2FA\"\n                    )}\n                  </ha-switch>\n                `\n              : \"\"}\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"${this.hass!.localize(\n        \"ui.panel.config.cloud.google.title\"\n      )}\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  ${this.hass!.localize(\"ui.panel.config.cloud.google.banner\")}\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.not_exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.google_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudGoogleEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = (ev.target as HaSwitch).checked;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _disable2FAChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newDisable2FA = (ev.target as HaSwitch).checked;\n    const curDisable2FA = Boolean(\n      (this._entityConfigs[entityId] || {}).disable_2fa\n    );\n    if (newDisable2FA === curDisable2FA) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      disable_2fa: newDisable2FA,\n    });\n  }\n\n  private async _updateConfig(entityId: string, values: GoogleEntityConfig) {\n    const updatedConfig = await updateCloudGoogleEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        showToast(parent, {\n          message: this.hass!.localize(\n            \"ui.panel.config.cloud.googe.sync_to_google\"\n          ),\n        });\n        cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      ha-switch {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-google-assistant\": CloudGoogleAssistant;\n  }\n}\n","import { HomeAssistant } from \"../types\";\n\nexport interface GoogleEntity {\n  entity_id: string;\n  traits: string[];\n  might_2fa: boolean;\n}\n\nexport const fetchCloudGoogleEntities = (hass: HomeAssistant) =>\n  hass.callWS<GoogleEntity[]>({ type: \"cloud/google_assistant/entities\" });\n"],"sourceRoot":""}