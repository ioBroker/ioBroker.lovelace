{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/resources/codemirror.ondemand.ts","webpack:///./src/components/ha-code-editor.ts","webpack:///./src/panels/lovelace/hui-editor.ts"],"names":["struct","superstruct","types","value","includes","icon","loaded","customElement","HaCodeEditor","property","this","_value","codemirror","getValue","shadowRoot","querySelector","refresh","autofocus","focus","changedProps","has","setOption","mode","setValue","_calcGutters","_setScrollBarDirection","classList","toggle","error","_load","async","codeMirror","attachShadow","innerHTML","codeMirrorCss","lineNumbers","tabSize","viewportMargin","Infinity","extraKeys","Tab","gutters","on","_onChange","newValue","fireEvent","rtl","getWrapperElement","UpdatingElement","lovelaceStruct","title","views","resources","optional","LovelaceFullConfigEditor","hass","lovelace","closeEditor","_saving","_changed","haStyle","css","html","_closeEditor","localize","classMap","saved","_handleSave","computeRTL","_yamlChanged","yamlEditor","safeDump","config","getDoc","isClean","_generation","window","onbeforeunload","confirm","hasComments","safeLoad","alert","saveConfig","changeGeneration","LitElement","customElements","define"],"mappings":"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","file":"chunk.26bb5ebaee4a9f07c94f.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","interface LoadedCodeMirror {\n  codeMirror: any;\n  codeMirrorCss: any;\n}\n\nlet loaded: Promise<LoadedCodeMirror>;\n\nexport const loadCodeMirror = async (): Promise<LoadedCodeMirror> => {\n  if (!loaded) {\n    loaded = import(/* webpackChunkName: \"codemirror\" */ \"./codemirror\");\n  }\n  return loaded;\n};\n","import { loadCodeMirror } from \"../resources/codemirror.ondemand\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  UpdatingElement,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\nimport { Editor } from \"codemirror\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends UpdatingElement {\n  public codemirror?: Editor;\n  @property() public mode?: string;\n  @property() public autofocus = false;\n  @property() public rtl = false;\n  @property() public error = false;\n  @property() private _value = \"\";\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.getValue() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    return this.shadowRoot!.querySelector(\"span.cm-comment\") ? true : false;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    this.codemirror.refresh();\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.setOption(\"mode\", this.mode);\n    }\n    if (changedProps.has(\"autofocus\")) {\n      this.codemirror.setOption(\"autofocus\", this.autofocus !== false);\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.setValue(this._value);\n    }\n    if (changedProps.has(\"rtl\")) {\n      this.codemirror.setOption(\"gutters\", this._calcGutters());\n      this._setScrollBarDirection();\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._load();\n  }\n\n  private async _load(): Promise<void> {\n    const loaded = await loadCodeMirror();\n\n    const codeMirror = loaded.codeMirror;\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot!.innerHTML = `\n    <style>\n      ${loaded.codeMirrorCss}\n      .CodeMirror {\n        height: var(--code-mirror-height, auto);\n        direction: var(--code-mirror-direction, ltr);\n      }\n      .CodeMirror-scroll {\n        max-height: var(--code-mirror-max-height, --code-mirror-height);\n      }\n      .CodeMirror-gutters {\n        border-right: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        background-color: var(--paper-dialog-background-color, var(--primary-background-color));\n        transition: 0.2s ease border-right;\n      }\n      :host(.error-state) .CodeMirror-gutters {\n        border-color: var(--error-state-color, red);\n      }\n      .CodeMirror-focused .CodeMirror-gutters {\n        border-right: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n      }\n      .CodeMirror-linenumber {\n        color: var(--paper-dialog-color, var(--primary-text-color));\n      }\n      .rtl .CodeMirror-vscrollbar {\n        right: auto;\n        left: 0px;\n      }\n      .rtl-gutter {\n        width: 20px;\n      }\n    </style>`;\n\n    this.codemirror = codeMirror(shadowRoot, {\n      value: this._value,\n      lineNumbers: true,\n      tabSize: 2,\n      mode: this.mode,\n      autofocus: this.autofocus !== false,\n      viewportMargin: Infinity,\n      extraKeys: {\n        Tab: \"indentMore\",\n        \"Shift-Tab\": \"indentLess\",\n      },\n      gutters: this._calcGutters(),\n    });\n    this._setScrollBarDirection();\n    this.codemirror!.on(\"changes\", () => this._onChange());\n  }\n\n  private _onChange(): void {\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  private _calcGutters(): string[] {\n    return this.rtl ? [\"rtl-gutter\", \"CodeMirror-linenumbers\"] : [];\n  }\n\n  private _setScrollBarDirection(): void {\n    if (this.codemirror) {\n      this.codemirror.getWrapperElement().classList.toggle(\"rtl\", this.rtl);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { LitElement, html, TemplateResult, CSSResult, css } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { safeDump, safeLoad } from \"js-yaml\";\n\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\n\nimport { struct } from \"./common/structs/struct\";\nimport { Lovelace } from \"./types\";\n\nimport \"../../components/ha-icon\";\nimport { haStyle } from \"../../resources/styles\";\nimport \"../../components/ha-code-editor\";\n// This is not a duplicate import, one is for types, one is for element.\n// tslint:disable-next-line\nimport { HaCodeEditor } from \"../../components/ha-code-editor\";\nimport { HomeAssistant } from \"../../types\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\n\nconst lovelaceStruct = struct.interface({\n  title: \"string?\",\n  views: [\"object\"],\n  resources: struct.optional([\"object\"]),\n});\n\nclass LovelaceFullConfigEditor extends LitElement {\n  public hass!: HomeAssistant;\n  public lovelace?: Lovelace;\n  public closeEditor?: () => void;\n  private _saving?: boolean;\n  private _changed?: boolean;\n  private _generation = 1;\n\n  static get properties() {\n    return {\n      hass: {},\n      lovelace: {},\n      closeEditor: {},\n      _saving: {},\n      _changed: {},\n    };\n  }\n\n  public render(): TemplateResult | void {\n    return html`\n      <app-header-layout>\n        <app-header>\n          <app-toolbar>\n            <paper-icon-button\n              icon=\"hass:close\"\n              @click=\"${this._closeEditor}\"\n            ></paper-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button raised @click=\"${this._handleSave}\"\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <ha-code-editor\n            mode=\"yaml\"\n            autofocus\n            .rtl=${computeRTL(this.hass)}\n            .hass=\"${this.hass}\"\n            @value-changed=\"${this._yamlChanged}\"\n            @editor-save=\"${this._handleSave}\"\n          >\n          </ha-code-editor>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.yamlEditor.value = safeDump(this.lovelace!.config);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        app-header-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--dark-background-color, #455a64);\n          color: var(--dark-text-color);\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - 68px);\n        }\n\n        hui-code-editor {\n          height: 100%;\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    this._changed = !this.yamlEditor\n      .codemirror!.getDoc()\n      .isClean(this._generation);\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => {\n        return true;\n      };\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private _closeEditor() {\n    if (this._changed) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_changes\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_comments\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n\n    let value;\n    try {\n      value = safeLoad(this.yamlEditor.value);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_parse_yaml\",\n          \"error\",\n          err\n        )\n      );\n      this._saving = false;\n      return;\n    }\n    try {\n      value = lovelaceStruct(value);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_invalid_config\",\n          \"error\",\n          err\n        )\n      );\n      return;\n    }\n    try {\n      await this.lovelace!.saveConfig(value);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_save_yaml\",\n          \"error\",\n          err\n        )\n      );\n    }\n    this._generation = this.yamlEditor\n      .codemirror!.getDoc()\n      .changeGeneration(true);\n    window.onbeforeunload = null;\n    this._saving = false;\n    this._changed = false;\n  }\n\n  private get yamlEditor(): HaCodeEditor {\n    return this.shadowRoot!.querySelector(\"ha-code-editor\")! as HaCodeEditor;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n\ncustomElements.define(\"hui-editor\", LovelaceFullConfigEditor);\n"],"sourceRoot":""}