{"version":3,"sources":["webpack:///../src/error.js","webpack:///../node_modules/kind-of/index.js","webpack:///../src/constants.js","webpack:///../src/utils.js","webpack:///../src/kinds.js","webpack:///../src/types.js","webpack:///../src/superstruct.js","webpack:///../src/index.js"],"names":["message","StructError","errors","Error","type","path","JSON","toString","Object","prototype","val","ctorName","Array","isArray","constructor","isBuffer","length","callee","err","indexOf","isArguments","Date","toDateString","getDate","setDate","isDate","stackTraceLimit","isError","RegExp","flags","ignoreCase","multiline","global","isRegexp","next","isGeneratorObj","call","slice","toLowerCase","replace","name","IS_STRUCT","KIND","isStruct","value","resolveDefaults","defaults","any","schema","kindOf","tuple","list","func","object","required","union","intersection","scalar","optional","en","s","e","String","Kind","undefined","data","result","failure","reason","isValid","array","element","ret","i","v","singleE","concat","r","obj","ks","properties","kind","valueKeys","propertiesKeys","keys","Set","key","fn","kinds","k","Math","types","t","Kinds","values","resolved","e2","struct","createSchema","Types","superstruct","config","options","this","Struct","TYPES","isNaN"],"mappings":"u1EAMA,E,iCASE,GAAmB,gB,IACXA,EAAUC,EAAYA,OAA5B,G,4FACA,IAFiB,IAIX,EAAN,EAAM,OAAN,EAAM,OAAN,EAAM,QAAN,EAAM,SAAN,EAAM,KAJW,EAIjB,EAAyCC,cAJxB,MAIX,GAJW,S,EAKjB,O,EACA,O,EACA,Q,EACA,S,EACA,O,EACA,SAEKA,EAAL,Q,EACE,K,MAGEC,MAAJ,kB,MACE,kB,KAA8B,EAA9B,a,EAEA,OAAa,IAAIA,OAAjB,MAnBe,E,mRARnB,GAAqB,IACb,EAAN,EAAM,OAAN,EAAM,OAAN,EAAM,M,MACUH,6BAAVA,OAAwCI,EAAxCJ,YACJK,EAAKA,OAASA,SAAdA,OAAwBA,EAAKA,KAA7BA,UAA6C,GADzCL,0BAEaM,KAAKA,UAFxB,GAAMN,U,yCAHV,YCNIO,EAAWC,OAAOC,UAAUF,SAEhC,EAAiB,SAAgBG,GAC/B,QAAY,IAARA,EAAgB,MAAO,YAC3B,GAAY,OAARA,EAAc,MAAO,OAEzB,IAAIN,EAAO,EAAOM,GAClB,GAAa,YAATN,EAAoB,MAAO,UAC/B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,aAATA,EACF,MAoFwB,sBAAnBO,EApFgBD,GAAO,oBAAsB,WAGpD,GAwDF,SAAiBA,GACf,OAAIE,MAAMC,QAAgBD,MAAMC,QAAQH,GACjCA,aAAeE,MA1DlBC,CAAQH,GAAM,MAAO,QACzB,GA2GF,SAAkBA,GAChB,GAAIA,EAAII,aAAmD,mBAA7BJ,EAAII,YAAYC,SAC5C,OAAOL,EAAII,YAAYC,SAASL,GAElC,OAAO,EA/GHK,CAASL,GAAM,MAAO,SAC1B,GAwFF,SAAqBA,GACnB,IACE,GAA0B,iBAAfA,EAAIM,QAA6C,mBAAfN,EAAIO,OAC/C,OAAO,EAET,MAAOC,GACP,IAAuC,IAAnCA,EAAIlB,QAAQmB,QAAQ,UACtB,OAAO,EAGX,OAAO,EAlGHC,CAAYV,GAAM,MAAO,YAC7B,GA8DF,SAAgBA,GACd,OAAIA,aAAeW,MACgB,mBAArBX,EAAIY,cACU,mBAAhBZ,EAAIa,SACY,mBAAhBb,EAAIc,QAlEZC,CAAOf,GAAM,MAAO,OACxB,GAyDF,SAAiBA,GACf,OAAOA,aAAeP,OAAiC,iBAAhBO,EAAIV,SAAwBU,EAAII,aAA0D,iBAApCJ,EAAII,YAAYY,gBA1DzGC,CAAQjB,GAAM,MAAO,QACzB,GAmEF,SAAkBA,GAChB,OAAIA,aAAekB,QACS,iBAAdlB,EAAImB,OACa,kBAAnBnB,EAAIoB,YACc,kBAAlBpB,EAAIqB,WACW,kBAAfrB,EAAIsB,OAxEZC,CAASvB,GAAM,MAAO,SAE1B,OAAQC,EAASD,IACf,IAAK,SAAU,MAAO,SACtB,IAAK,UAAW,MAAO,UAGvB,IAAK,UAAW,MAAO,UACvB,IAAK,UAAW,MAAO,UACvB,IAAK,MAAO,MAAO,MACnB,IAAK,MAAO,MAAO,MAGnB,IAAK,YAAa,MAAO,YACzB,IAAK,aAAc,MAAO,aAC1B,IAAK,oBAAqB,MAAO,oBAGjC,IAAK,aAAc,MAAO,aAC1B,IAAK,cAAe,MAAO,cAG3B,IAAK,aAAc,MAAO,aAC1B,IAAK,cAAe,MAAO,cAC3B,IAAK,eAAgB,MAAO,eAC5B,IAAK,eAAgB,MAAO,eAG9B,GAmDF,SAAwBA,GACtB,MAA4B,mBAAdA,EAAG,OACU,mBAAfA,EAAG,QACU,mBAAbA,EAAIwB,KAtDZC,CAAezB,GACjB,MAAO,YAKT,OADAN,EAAOG,EAAS6B,KAAK1B,IAEnB,IAAK,kBAAmB,MAAO,SAE/B,IAAK,wBAAyB,MAAO,cACrC,IAAK,wBAAyB,MAAO,cACrC,IAAK,2BAA4B,MAAO,iBACxC,IAAK,0BAA2B,MAAO,gBAIzC,OAAON,EAAKiC,MAAM,GAAI,GAAGC,cAAcC,QAAQ,MAAO,KAGxD,SAAS5B,EAASD,GAChB,OAAOA,EAAII,YAAcJ,EAAII,YAAY0B,KAAO,KC9DlD,IAAMC,EAAN,iBAQMC,EAAN,eCLO,SAASC,EAASC,G,SACbA,IAASA,EAAnB,IAWK,SAASC,EAAgBC,EAAUF,G,MACb,mBAAbE,EAA0BA,EAAjC,GAAP,E,wKCXF,E,WACE,OAAkC,U,KAChC,O,KACA,O,KACA,YAYJ,SAASC,EAAIC,EAAQ,EAArB,G,GACML,EAAJ,G,OACSK,EAAP,G,GAGEA,aAAJ,E,OACE,E,OAGMC,EAAR,I,IACE,Q,OACSD,EAAOA,OAASA,EACnBE,EAAMA,EAAQA,EADXF,GAEHG,EAAKA,EAAQA,EAFjB,G,IAKF,W,OACSC,EAAKA,EAAQA,EAApB,G,IAGF,S,OACSC,EAAOA,EAAQA,EAAtB,G,IAGF,S,IAEE,EADIC,GAAJ,E,GAGIN,EAAOA,SAAX,O,GACE,E,EACSA,EAAOA,MAAMA,GAAtB,IAGEA,EAAOA,SAAX,K,EAESO,EADSP,EAAOA,MAAvB,aACsBO,EAAtB,QACK,GAAIP,EAAOA,SAAX,KAA0B,C,EAExBQ,EADSR,EAAOA,MAAvB,YACOQ,EAAP,Q,EAEOC,EAAOA,EAAQA,EAAtB,G,OAGF,I,EACSC,EAASA,OAAMA,EAAtB,IAGF,E,MASI,IAAIvD,MAAM,mBAAV,OAAN,IAqFJ,SAASwD,EAAGX,EAAQ,EAApB,G,GACE,UAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAKEC,EAAO4C,EAAA,KACNY,Y,WAEMtD,KAAKA,UAAZ,GACA,MAAOuD,G,OACAC,OAAP,OALO,KAAb,O,OAgBO,IAAIC,EAjBX,OAiBsB3D,GANL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,G,OACRG,EAAOA,SAASA,GACnB,MAACgB,EADEhB,GAEH,CAAC,CAAEiB,KAAF,EAAe5D,KAAf,GAAyBuC,QAAOxC,YA4BzC,SAASgD,EAAKJ,EAAQ,EAAtB,G,GACE,aAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAKEC,EAAN,a,OAqCO,IAAI2D,EAtCX,WAsCsB3D,GApCL,WAA6C,IAG5D,EAHgBwC,EAA4C,uDAApCC,EAAT,KAA6C,uCACtDqB,EAASlB,EAAOA,EAAtB,GACImB,EAAU,CAAE9D,KAAF,GAAY+D,OAA1B,M,OAGQnB,EAAR,I,IACE,U,EACE,E,UAGF,S,GACE,E,EACA,S,UAGF,S,GACE,E,OACAkB,EAAA,G,oBASQ,IAAIhE,MAAM,mBAAV,OAAN,I,OAKCkE,EACH,MAACL,EADEK,GAEH,CAAC,EAAD,CAAGjE,OAAMwC,QAAOqB,KAAhB,GAFJ,OAgMJ,SAASd,EAAKH,EAAQ,EAAtB,G,GACyBC,UAAnBA,EAAOA,IAAX,IAAkCD,EAAOA,O,MAM/B,IAAI7C,MAAM,mBAAV,OAAN,I,IAIEmE,EAAQb,EAAOA,aAASA,EAA9B,GACMc,EAAUxB,EAAIC,EAAJD,UAAhB,GAEM3C,EAAOA,IAAPA,OAAWmE,EAAjB,KAAMnE,K,OAiCC,IAAI2D,EAlCX,OAkCsB3D,GAhCL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,GAAuC,EAC9ByB,EAAMA,SAA9B,GADsD,SAChD,EADgD,KAChD,EADgD,K,GAGtD,E,SACE,OACO,CAAP,G,EAGF,E,QACMpE,EAAN,GACMsE,EAAN,GAVsD,WAY7CC,G,IACDC,EAAI9B,EAAV,GAboD,IAcrC2B,EAAQA,SAAvB,GAdoD,GAc9C,EAd8C,KAc9C,EAd8C,K,GAgBpD,E,OACeV,EAAEA,QAAU,CAAzB,IACA,SAAac,Y,EACX,KAAe,CAACF,GAAGG,OAAOD,EAA1B,M,EACA,O,EACA,W,aAKJ,GAAAE,GAdOJ,EAAT,EAAgBA,EAAI7B,EAApB,OAAkC6B,IAAK,EAA9BA,G,OAiBFvE,EAAOA,OAAS,CAAC,EAAD,GAAMA,EAAN,IAAiBA,YAAY,MAAC8D,EAArDQ,MAkCJ,SAASnB,EAAOL,EAAQ,EAAxB,G,GACE,WAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAIE2E,EAAMrB,EAAOA,cAAUA,EAA7B,GACMsB,EAAN,GACMC,EAAN,G,IAEK,IAAL,OAA0B,C,EACxB,Q,IAEMC,EAAOlC,EADHC,EAAV,QACoBD,EAApB,G,EACA,K,IAII3C,EAAOA,IAAPA,OAAW2E,EAAjB,OAAM3E,K,OAkDC,IAAI2D,EAnDX,SAmDsB3D,GAjDL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,GAAuC,EACtCiC,EAAIA,SAApB,GADsD,SAChD,EADgD,K,GAGtD,E,SACE,OACO,CAAP,G,IAGI5E,EAAN,GACMsE,EAAN,GACMU,EAAY1E,OAAOA,KAAzB,GACM2E,EAAiB3E,OAAOA,KAA9B,GACM4E,EAAO,IAAIC,IAAIH,EAAUA,OAA/B,I,SAEA,SAAaI,Y,IACPZ,EAAI9B,EAAR,GACMqC,EAAOD,EAAb,QAEA,IAAIN,I,EAEE7B,EADMC,GAAYA,EAAtB,GACA,I,GAGF,E,CATkB,QAeHmC,EAAKA,SAASA,EAA7B,GAfkB,GAeZ,EAfY,KAeZ,EAfY,K,GAiBlB,GACepB,EAAEA,QAAU,CAAzB,IACA,SAAac,Y,EACX,KAAe,CAACW,GAAKV,OAAOD,EAA5B,M,EACA,O,EACA,gBAKAW,KAAOA,QAAX,IAAoBT,K,EAClB,GAAAA,O,KAlBMhB,EAAI,CAAEI,KAAF,EAAe5D,KAAM,CAArB,GAA4BuC,MAAtC,G,EACA,YAqBG1C,EAAOA,OAAS,CAAC,EAAD,GAAMA,EAAN,IAAiBA,YAAY,MAAC8D,EAArDQ,MAcJ,SAASd,EAASV,EAAQ,EAA1B,G,OACSO,EAAM,CAACP,EAAPO,eAAP,GAsFF,SAASE,EAAOT,EAAQ,EAAxB,G,GACE,WAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,IAPqC,IAYnCoF,EADN,EAAM,MACN,G,GAEA,aAAItC,EAAOA,G,MAMD,IAAI9C,MAAM,iBAAV,OAAN,I,IAIE8E,EAAO7B,EAAKA,EAAIA,GAEhBhD,EAAN,E,OAYO,IAAI2D,EAbX,SAasB3D,GAXLwC,YAAS,QACAqC,EAAKA,SAA7B,GADwB,GAClB,EADkB,KAClB,EADkB,K,OAGxB,G,EACE,OACO,CAAP,IAGK,MAACjB,EAAR,MAcJ,SAASd,EAAMF,EAAQ,EAAvB,G,GACE,UAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAIEqF,EAAQxC,EAAOA,KAAIY,mBAAKb,EAAIA,OAAGA,EAArC,MACMuB,EAAQb,EAAOA,aAASA,EAA9B,GAEMrD,EAAOA,IAAPA,OAAWoF,EAAMA,KAAIC,mBAAKA,EAAfD,QAAjB,OAAMpF,K,OAyCC,IAAI2D,EA1CX,QA0CsB3D,GAxCL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,GAAuC,EACtCyB,EAAMA,SAAtB,GADsD,SAChD,EADgD,K,GAGtD,E,SACE,OACO,CAAP,G,QAGIE,EAAN,GACMtE,EAAN,GACMc,EAAS0E,KAAKA,IAAI9C,EAAT8C,OAAuBF,EAAtC,QAVsD,WAY7Cf,G,IACDQ,EAAOO,EAAb,GACMd,EAAI9B,EAAV,G,IAEA,EAAW,C,IACHiB,EAAI,CAAEI,KAAF,EAAe5D,KAAM,CAArB,GAA0BuC,MAApC,G,SACA,Q,WAlBkD,QAsBrCqC,EAAKA,SAApB,GAtBoD,GAsB9C,EAtB8C,KAsB9C,EAtB8C,K,GAwBpD,E,OACepB,EAAEA,QAAU,CAAzB,IACA,SAAac,Y,EACX,KAAe,CAACF,GAAGG,OAAOD,EAA1B,M,EACA,O,EACA,W,aAKJ,GAAAE,GAtBOJ,EAAT,EAAgBA,EAAhB,EAA4BA,IAAK,EAAxBA,G,OAyBFvE,EAAOA,OAAS,CAAC,EAAD,GAAMA,EAAN,IAAiBA,YAAY,MAAC8D,EAArDQ,MAcJ,SAASjB,EAAMP,EAAQ,EAAvB,G,GACE,UAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAIEqF,EAAQxC,EAAOA,KAAIY,mBAAKb,EAAIA,OAAGA,EAArC,MAEM3C,EAAOoF,EAAMA,KAAIC,mBAAKA,EAAfD,aAAb,O,OAiBO,IAAIzB,EAlBX,QAkBsB3D,GAhBL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,GACT3C,EAAN,GADsD,uBAGjD,YAAL,EAAK,+CAAkB,KAAvB,EAAuB,UACNuF,WAAf,GADqB,SACf,EADe,KACf,EADe,K,IAGrB,E,MACS,MAACzB,EAARa,G,EAGF,KAAAhB,IAVoD,kF,SAYtD,UACA,KAcJ,SAASL,EAAaR,EAAQ,EAA9B,G,GACE,UAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAIEwF,EAAQ3C,EAAOA,KAAIY,mBAAKb,EAAIA,OAAGA,EAArC,MAEM3C,EAAOuF,EAAMA,KAAIC,mBAAKA,EAAfD,aAAb,O,OAkBO,IAAI5B,EAnBX,eAmBsB3D,GAjBL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,GACX6B,EAAJ,EADsD,uBAGjD,YAAL,EAAK,+CAAkB,KAAvB,EAAuB,UACNkB,EAAEA,SAAjB,GADqB,SACf,EADe,KACf,EADe,K,GAGrB,E,SACE,OACO,CAAP,G,EAGF,GAXoD,kF,MAc/C,MAAC5B,EAAR,MAYJ,IAAM6B,EAAQ,C,WAvyBd,SAAc7C,EAAQ,EAAtB,G,GACyBC,UAAnBA,EAAOA,IAAX,IAAkCD,EAAOA,O,MAM/B,IAAI7C,MAAM,mBAAV,OAAN,I,IAIE2E,EAAMrB,EAAOA,cAAUA,EAA7B,GACM2B,EAAOrC,EAAIC,EAAJD,UAAb,GACM+C,EAAS/C,EAAIC,EAAJD,UAAf,GAEM3C,EAAOA,QAAPA,OAAegF,EAAKhF,KAApBA,YAA4B0F,EAAlC,KAAM1F,K,OA+CC,IAAI2D,EAhDX,OAgDsB3D,GA9CLwC,Y,IACTmD,EAAWlD,EAAjB,G,EACQkD,EAAWA,EAAXA,QAARnD,EAFwB,IAGlB,EAHkB,EAGRkC,EAAIA,SAApB,GAHwB,M,GAKxB,E,SACE,OACO,CAAP,G,IAGIN,EAAN,GACMtE,EAAN,GAXwB,c,IAchBwE,EAAI9B,EAAV,GAdsB,IAePwC,EAAKA,SAApB,GAfsB,GAehB,EAfgB,KAehB,EAfgB,K,GAiBtB,E,OACevB,EAAEA,QAAU,CAAzB,IACA,SAAac,Y,EACX,KAAe,CAAC,GAAD,OAAWA,EAA1B,M,EACA,O,EACA,WALG,I,aAUP,EA3BsB,QA4BLmB,EAAOA,SAAxB,GA5BsB,GA4BhB,EA5BgB,KA4BhB,EA5BgB,K,GA8BtB,E,OACgBE,EAAGA,QAAU,CAA3B,IACA,SAAcrB,Y,EACZ,KAAe,CAAC,GAAD,OAAWA,EAA1B,M,EACA,O,EACA,WALI,I,aAUR,KAxCsB,K,IAanB,IAAL,OAAqB,EAArB,G,OA8BOzE,EAAOA,OAAS,CAAC,EAAD,GAAMA,EAAN,IAAiBA,YAAY,MAAC8D,EAArDQ,O,KA4uBU,E,MAvrBd,SAAexB,EAAQ,EAAvB,G,OAEYG,EAAK,CADLQ,EAAGA,OAAQA,IACXR,EAAV,I,SAqrBY,E,SA7mBd,SAAkBH,EAAQ,EAA1B,G,IAEQ5C,EAAOA,YAAPA,OAAmB4C,EAAzB,KAAM5C,K,OAOC,IAAI2D,EARX,WAQsB3D,GANL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,G,OACRD,aAAiBA,EACpB,MAACoB,EADEpB,GAEH,CAAC,CAAEqB,KAAF,EAAe5D,KAAf,GAAyBuC,QAAOxC,a,UAczC,SAAe4C,EAAQ,EAAvB,G,GACE,WAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAIE2E,EAAMrB,EAAOA,cAAUA,EAA7B,GACMsB,EAAN,GACMC,EAAN,G,IAEK,IAAL,OAA0B,C,EACxB,Q,IAEMC,EAAOlC,EADHC,EAAV,QACoBD,EAApB,G,EACA,K,IAII3C,EAAOA,IAAPA,OAAW2E,EAAjB,OAAM3E,K,OAyCC,IAAI2D,EA1CX,YA0CsB3D,GAxCL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,GAAuC,EACtCiC,EAAIA,SAApB,GADsD,SAChD,EADgD,K,GAGtD,E,SACE,OACO,CAAP,G,IAGI5E,EAAN,GACMsE,EAAN,EATsD,WAWtD,G,IACME,EAAI9B,EAAR,GACMqC,EAAOD,EAAb,QAEA,IAAIN,I,EAEE7B,EADMC,GAAYA,EAAtB,GACA,IAjBkD,QAoBrCmC,EAAKA,SAASA,EAA7B,GApBoD,GAoB9C,EApB8C,KAoB9C,EApB8C,K,GAsBpD,E,OACepB,EAAEA,QAAU,CAAzB,IACA,SAAac,Y,EACX,KAAe,CAAC,GAAD,OAAaA,EAA5B,M,EACA,O,EACA,W,YAKAW,aAAJ,IAAoBT,K,EAClB,GAAAA,I,IAtBC,IAAL,OAA8B,EAA9B,G,OA0BO3E,EAAOA,OAAS,CAAC,EAAD,GAAMA,EAAN,IAAiBA,YAAY,MAAC8D,EAArDQ,O,KAcJ,SAAcxB,EAAQ,EAAtB,G,GACE,aAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAIJ,EACA,E,SAWO,IAAI4D,EAVX,OACA,WACgBnB,Y,SACLI,I,EACT,KAAYiD,EAAZhB,K,EACA,KAAYgB,EAAZ,K,EACA,SAAgBA,EAAhB,SACOhB,EAAKA,SAAZ,O,eAuHJ,SAAiBjC,EAAQ,EAAzB,G,IAEQ5C,EAAOA,YAAPA,OAAmBE,KAAKA,UAA9B,I,OAOO,IAAIyD,EARX,UAQsB3D,GANL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,G,OACRD,IAAUA,EACb,MAACoB,EADEpB,GAEH,CAAC,CAAEqB,KAAF,EAAe5D,KAAf,GAAyBuC,QAAOxC,a,4BA8GzC,SAAiB4C,EAAQ,EAAzB,G,GACE,WAAIC,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,IAIE2E,EAAMrB,EAAOA,cAAUA,EAA7B,GACMsB,EAAN,GACMC,EAAN,G,IAEK,IAAL,OAA0B,C,EACxB,Q,IAEMC,EAAOlC,EADHC,EAAV,QACoBD,EAApB,G,EACA,K,IAII3C,EAAOA,IAAPA,OAAW2E,EAAjB,OAAM3E,S,OAyCC,IAAI2D,EA1CX,UA0CsB3D,GAxCL,WAAuC,IAAtCwC,EAAsC,uDAA9BC,EAAT,GAAuC,EACtCiC,EAAIA,SAApB,GADsD,SAChD,EADgD,K,GAGtD,E,SACE,OACO,CAAP,G,IAGI5E,EAAN,GACMsE,EAAN,GATsD,WAWtD,G,IACME,EAAI9B,EAAR,GACMqC,EAAOD,EAAb,QAEA,IAAIN,I,EAEE7B,EADMC,GAAYA,EAAtB,GACA,IAjBkD,QAoBrCmC,EAAKA,SAASA,EAA7B,GApBoD,GAoB9C,EApB8C,KAoB9C,EApB8C,K,GAsBpD,E,OACepB,EAAEA,QAAU,CAAzB,IACA,SAAac,Y,EACX,KAAe,CAAC,GAAD,OAAaA,EAA5B,M,EACA,O,EACA,W,YAKAW,aAAJ,IAAoBT,K,EAClB,GAAAA,I,IAtBC,IAAL,OAA8B,EAA9B,G,OA0BO3E,EAAOA,OAAS,CAAC,EAAD,GAAMA,EAAN,IAAiBA,YAAY,MAAC8D,EAArDQ,O,gDAzRJ,SAAiB0B,EAAc,EAA/B,G,GACE,aAAIjD,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,I,OA4BG,IAAI4D,EAxBX,UACA,cACiB,WAA6C,IAA5CnB,EAA4C,uDAApCC,EAAT,KAA6C,uCACtDG,EAASkD,EAAaA,EAA5B,G,GAEA,aAAIjD,EAAOA,G,MAMD,IAAI9C,MAAM,mBAAV,OAAN,IATwD,MAapC6C,EAAOA,SAA/B,GAb4D,SAatD,EAbsD,KAatD,EAbsD,K,OAe5D,EACS,CAAP,GAGK,MAACgB,EAAR,QC9YEmC,EAAQ,C,IACPvD,wBAAmBoB,IAAVpB,ICjChB,SAASwD,IAAyB,IAAbC,EAAa,uDAAlC,GACQV,EAAQA,EAARA,KAEAU,EAAOA,OAFb,I,SAcA,OAAgD,IAAdC,EAAc,uDAAhD,GACM3D,EAAJ,K,EACWK,EAATA,Q,IAGIiC,EAAOY,EAAMA,IAAIA,EAAQA,EAAlBA,QAA0CF,W,SAEvD,K,GACMY,gBAAJ,E,MAMU,IAAIpG,MAAV,0B,OAIGqG,EAAOA,OAAd,G,cAGF,mBAAyC,CAAE5D,OAA3C,I,OACA,mBAAoC,CAAEA,MAAtC,I,EAEA,KAAcqC,EAAd,K,EACA,KAAcA,EAAd,K,EACA,S,EACA,W,EACA,U,EAEA,OAAgBrC,YAAS,QACCqC,EAAKA,SAA7B,GADuB,GACjB,EADiB,KACjB,EADiB,K,GAGvB,E,MACQ,IAAIhF,EAAV,G,OAGF,G,EAGF,KAAc2C,Y,OAAS,EACLqC,EAAKA,SAArB,GADqB,O,EAKvB,SAAkBrC,YAAS,QACDqC,EAAKA,SAA7B,GADyB,GACnB,EADmB,KACnB,EADmB,K,OAGzB,EACS,CAAC,IAAIhF,EAAZ,IAGK,MAAC+D,EAAR,IAGF,E,cAOF,iBAA2BxB,Y,IACnByC,EAAOY,EAAb,G,EAEA,GAAe,gB,OAEHI,EADGhB,EAAKA,EAAQA,EAAbA,QAAqCU,WAC3BM,EAAvB,OASJ,EDhGY,CAAC,YAAD,mSAAd,WAyCMQ,SAAQrG,Y,EACZ,GAAcwC,mBAASK,EAAOA,KAA9B,MAUFkD,EAAMA,KAAOvD,kBAA2BK,SAAlBA,EAAOA,KAAsByD,MAAnDP,IElDeC","file":"chunk.ae94ecaaff4b9dfa5937.js","sourcesContent":["/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n    return message\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs)\n    super(message)\n\n    const { data, path, value, reason, type, errors = [] } = attrs\n    this.data = data\n    this.path = path\n    this.value = value\n    this.reason = reason\n    this.type = type\n    this.errors = errors\n\n    if (!errors.length) {\n      errors.push(this)\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {StructError}\n */\n\nexport default StructError\n","var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@'\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport { IS_STRUCT, KIND }\n","import { IS_STRUCT } from './constants'\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nexport function isStruct(value) {\n  return !!(value && value[IS_STRUCT])\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nexport function resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults\n}\n","import kindOf from 'kind-of'\n\nimport { KIND } from './constants'\nimport { isStruct, resolveDefaults } from './utils'\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name\n    this.type = type\n    this.validate = validate\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults, options) {\n  if (isStruct(schema)) {\n    return schema[KIND]\n  }\n\n  if (schema instanceof Kind) {\n    return schema\n  }\n\n  switch (kindOf(schema)) {\n    case 'array': {\n      return schema.length > 1\n        ? tuple(schema, defaults, options)\n        : list(schema, defaults, options)\n    }\n\n    case 'function': {\n      return func(schema, defaults, options)\n    }\n\n    case 'object': {\n      return object(schema, defaults, options)\n    }\n\n    case 'string': {\n      let required = true\n      let type\n\n      if (schema.endsWith('?')) {\n        required = false\n        schema = schema.slice(0, -1)\n      }\n\n      if (schema.includes('|')) {\n        const scalars = schema.split(/\\s*\\|\\s*/g)\n        type = union(scalars, defaults, options)\n      } else if (schema.includes('&')) {\n        const scalars = schema.split(/\\s*&\\s*/g)\n        type = intersection(scalars, defaults, options)\n      } else {\n        type = scalar(schema, defaults, options)\n      }\n\n      if (!required) {\n        type = optional(type, undefined, options)\n      }\n\n      return type\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(\n      `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n    )\n  } else {\n    throw new Error(`Invalid schema: ${schema}`)\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dict structs must be defined as an array with two elements, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const keys = any(schema[0], undefined, options)\n  const values = any(schema[1], undefined, options)\n  const name = 'dict'\n  const type = `dict<${keys.type},${values.type}>`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = {}\n    const errors = []\n\n    for (let k in value) {\n      const v = value[k]\n      const [e, r] = keys.validate(k)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      k = r\n      const [e2, r2] = values.validate(v)\n\n      if (e2) {\n        const allE2 = e2.errors || [e2]\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[k] = r2\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Enum structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'enum'\n  const type = schema\n    .map(s => {\n      try {\n        return JSON.stringify(s)\n      } catch (e) {\n        return String(s)\n      }\n    })\n    .join(' | ')\n\n  const validate = (value = resolveDefaults(defaults)) => {\n    return schema.includes(value)\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults, options) {\n  const e = en(schema, undefined, options)\n  const l = list([e], defaults, options)\n  return l\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Function structs must be defined as a function, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'function'\n  const type = '<function>'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const result = schema(value, data)\n    let failure = { path: [], reason: null }\n    let isValid\n\n    switch (kindOf(result)) {\n      case 'boolean': {\n        isValid = result\n        break\n      }\n      case 'string': {\n        isValid = false\n        failure.reason = result\n        break\n      }\n      case 'object': {\n        isValid = false\n        failure = { ...failure, ...result }\n        break\n      }\n      default: {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`\n          )\n        } else {\n          throw new Error(`Invalid result: ${result}`)\n        }\n      }\n    }\n\n    return isValid\n      ? [undefined, value]\n      : [{ type, value, data: value, ...failure }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults, options) {\n  const name = 'instance'\n  const type = `instance<${schema.name}>`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value instanceof schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Interface structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'interface'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = value\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  let kind\n  let struct\n  const name = 'lazy'\n  const type = `lazy...`\n  const compile = value => {\n    struct = schema()\n    kind.name = struct.kind\n    kind.type = struct.type\n    kind.validate = struct.validate\n    return kind.validate(value)\n  }\n\n  kind = new Kind(name, type, compile)\n  return kind\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dynamic structs must be defined as a function, but you passed: ${createSchema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`)\n    }\n  }\n\n  const name = 'dynamic'\n  const type = 'dynamic...'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const schema = createSchema(value, data)\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Dynamic structs must return a schema, but you passed: ${schema}`\n        )\n      } else {\n        throw new Error(`Invalid schema: ${schema}`)\n      }\n    }\n\n    const [error, result] = schema.validate(value)\n\n    if (error) {\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `List structs must be defined as an array with a single element, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const array = scalar('array', undefined, options)\n  const element = any(schema[0], undefined, options)\n  const name = 'list'\n  const type = `[${element.type}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error, result] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    value = result\n    const errors = []\n    const ret = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [e, r] = element.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults, options) {\n  const name = 'literal'\n  const type = `literal: ${JSON.stringify(schema)}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value === schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Object structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'object'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n    const valueKeys = Object.keys(value)\n    const propertiesKeys = Object.keys(properties)\n    const keys = new Set(valueKeys.concat(propertiesKeys))\n\n    keys.forEach(key => {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v }\n        errors.push(e)\n        return\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        return\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    })\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults, options) {\n  return union([schema, 'undefined'], defaults, options)\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Partial structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'partial'\n  const type = `{${ks.join()},...}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Scalar structs must be defined as a string, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const { types } = options\n  const fn = types[schema]\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `No struct validator function found for type \"${schema}\".`\n      )\n    } else {\n      throw new Error(`Invalid type: ${schema}`)\n    }\n  }\n\n  const kind = func(fn, defaults, options)\n  const name = 'scalar'\n  const type = schema\n  const validate = value => {\n    const [error, result] = kind.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Tuple structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const array = scalar('array', undefined, options)\n  const name = 'tuple'\n  const type = `[${kinds.map(k => k.type).join()}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = []\n    const errors = []\n    const length = Math.max(value.length, kinds.length)\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i]\n      const v = value[i]\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v }\n        errors.push(e)\n        continue\n      }\n\n      const [e, r] = kind.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Union structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const name = 'union'\n  const type = kinds.map(k => k.type).join(' | ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    const errors = []\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value)\n\n      if (!e) {\n        return [undefined, r]\n      }\n\n      errors.push(e)\n    }\n    errors[0].type = type\n    return errors\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Intersection structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options))\n  const name = 'intersection'\n  const type = types.map(t => t.type).join(' & ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    let v = value\n\n    for (const t of types) {\n      const [e, r] = t.validate(v)\n\n      if (e) {\n        e.type = type\n        return [e]\n      }\n\n      v = r\n    }\n\n    return [undefined, v]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic,\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Kinds\n","import kindOf from 'kind-of'\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = [\n  'arguments',\n  'array',\n  'boolean',\n  'buffer',\n  'error',\n  'float32array',\n  'float64array',\n  'function',\n  'generatorfunction',\n  'int16array',\n  'int32array',\n  'int8array',\n  'map',\n  'null',\n  'number',\n  'object',\n  'promise',\n  'regexp',\n  'set',\n  'string',\n  'symbol',\n  'uint16array',\n  'uint32array',\n  'uint8array',\n  'uint8clampedarray',\n  'undefined',\n  'weakmap',\n  'weakset',\n]\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined,\n}\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type\n})\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value)\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n","import Kinds from './kinds'\nimport StructError from './error'\nimport Types from './types'\nimport { isStruct } from './utils'\nimport { IS_STRUCT, KIND } from './constants'\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = {\n    ...Types,\n    ...(config.types || {}),\n  }\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema\n    }\n\n    const kind = Kinds.any(schema, defaults, { ...options, types })\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'The `Struct` creation function should not be used with the `new` keyword.'\n          )\n        } else {\n          throw new Error('Invalid `new` keyword!')\n        }\n      }\n\n      return Struct.assert(data)\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true })\n    Object.defineProperty(Struct, KIND, { value: kind })\n\n    Struct.kind = kind.name\n    Struct.type = kind.type\n    Struct.schema = schema\n    Struct.defaults = defaults\n    Struct.options = options\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        throw new StructError(error)\n      }\n\n      return result\n    }\n\n    Struct.test = value => {\n      const [error] = kind.validate(value)\n      return !error\n    }\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        return [new StructError(error)]\n      }\n\n      return [undefined, result]\n    }\n\n    return Struct\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name]\n\n    struct[name] = (schema, defaults, options) => {\n      const type = kind(schema, defaults, { ...options, types })\n      const s = struct(type, defaults, options)\n      return s\n    }\n  })\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default superstruct\n","import StructError from './error'\nimport superstruct from './superstruct'\nimport { isStruct } from './utils'\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct()\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport { struct, superstruct, isStruct, StructError }\n"],"sourceRoot":""}