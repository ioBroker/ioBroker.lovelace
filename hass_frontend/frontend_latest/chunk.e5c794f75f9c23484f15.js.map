{"version":3,"sources":["webpack:///./src/resources/markdown_worker.ts","webpack:///./src/components/ha-markdown.ts","webpack:///./src/dialogs/notifications/notification-item-template.ts","webpack:///./src/dialogs/notifications/configurator-notification-item.ts","webpack:///./src/dialogs/notifications/persistent-notification-item.ts","webpack:///./src/dialogs/notifications/notification-item.ts","webpack:///./src/components/ha-paper-icon-button-prev.ts","webpack:///./src/dialogs/notifications/notification-drawer.js","webpack:///./src/mixins/localize-mixin.js","webpack:///./src/components/ha-card.ts","webpack:///./src/mixins/events-mixin.js","webpack:///./src/components/ha-relative-time.js","webpack:///./src/common/datetime/relative_time.ts"],"names":["addMethods","methods","module","exports","w","Worker","name","worker","customElement","HaMarkdown","property","type","Boolean","changedProps","markdownWorker","this","_render","innerHTML","renderMarkdown","content","breaks","gfm","tables","allowSvg","_resize","walker","document","createTreeWalker","nextNode","node","currentNode","HTMLAnchorElement","host","location","target","rel","addEventListener","fireEvent","UpdatingElement","html","css","LitElement","hass","notification","localize","attributes","friendly_name","_handleClick","state","entityId","entity_id","title","notification_id","message","created_at","_computeTooltip","_handleDismiss","callService","Date","toLocaleDateString","language","year","month","day","minute","hour","has","paperIconButtonClass","customElements","get","define","connectedCallback","super","setTimeout","icon","window","getComputedStyle","direction","HuiNotificationDrawer","EventsMixin","LocalizeMixin","PolymerElement","Object","open","observer","notifications","Array","computed","_notificationsBackend","value","ready","_closeDrawer","ev","stopPropagation","array","callback","index","length","_ackAll","DismissAllNotifications","async","_empty","_openChanged","_unsubNotifications","subscribeNotifications","connection","undefined","_computeNotifications","notificationsBackend","configuratorEntities","keys","states","filter","computeDomain","map","concat","showDialog","narrow","style","setProperty","innerWidth","$","drawer","dedupingMixin","superClass","Function","__computeLocalize","HaCard","header","fire","detail","options","HaRelativeTime","datetime","String","datetimeObj","parsedDateTime","constructor","updateRelative","bind","updateInterval","setInterval","disconnectedCallback","clearInterval","datetimeChanged","newVal","datetimeObjChanged","root","dom","relativeTime","tests","langKey","dateObj","delta","compareTime","getTime","tense","timeDesc","Math","abs","i","floor","includeTense"],"mappings":"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","file":"chunk.e5c794f75f9c23484f15.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"renderMarkdown\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"e84aa966bd450c2e0d68.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { UpdatingElement, property, customElement } from \"lit-element\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// @ts-ignore\n// tslint:disable-next-line: no-implicit-dependencies\nimport markdownWorker from \"workerize-loader!../resources/markdown_worker\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\nlet worker: any | undefined;\n\n@customElement(\"ha-markdown\")\nclass HaMarkdown extends UpdatingElement {\n  @property() public content = \"\";\n  @property({ type: Boolean }) public allowSvg = false;\n\n  protected update(changedProps) {\n    super.update(changedProps);\n\n    if (!worker) {\n      worker = markdownWorker();\n    }\n\n    this._render();\n  }\n\n  private async _render() {\n    this.innerHTML = await worker.renderMarkdown(\n      this.content,\n      {\n        breaks: true,\n        gfm: true,\n        tables: true,\n      },\n      {\n        allowSvg: this.allowSvg,\n      }\n    );\n\n    this._resize();\n\n    const walker = document.createTreeWalker(\n      this,\n      1 /* SHOW_ELEMENT */,\n      null,\n      false\n    );\n\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n\n      // Open external links in a new window\n      if (\n        node instanceof HTMLAnchorElement &&\n        node.host !== document.location.host\n      ) {\n        node.target = \"_blank\";\n\n        // protect referrer on external links and deny window.opener access for security reasons\n        // (see https://mathiasbynens.github.io/rel-noopener/)\n        node.rel = \"noreferrer noopener\";\n\n        // Fire a resize event when images loaded to notify content resized\n      } else if (node) {\n        node.addEventListener(\"load\", this._resize);\n      }\n    }\n  }\n\n  private _resize = () => fireEvent(this, \"iron-resize\");\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-markdown\": HaMarkdown;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport \"../../components/ha-card\";\n\n@customElement(\"notification-item-template\")\nexport class HuiNotificationItemTemplate extends LitElement {\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-card>\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div class=\"contents\"><slot></slot></div>\n        <div class=\"actions\"><slot name=\"actions\"></slot></div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .contents {\n        padding: 16px;\n        -ms-user-select: text;\n        -webkit-user-select: text;\n        -moz-user-select: text;\n        user-select: text;\n      }\n\n      ha-card .header {\n        /* start paper-font-headline style */\n        font-family: \"Roboto\", \"Noto\", sans-serif;\n        -webkit-font-smoothing: antialiased; /* OS X subpixel AA bleed bug */\n        text-rendering: optimizeLegibility;\n        font-size: 24px;\n        font-weight: 400;\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        /* end paper-font-headline style */\n\n        color: var(--primary-text-color);\n        padding: 16px 16px 0;\n      }\n\n      .actions {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n\n      ::slotted(.primary) {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item-template\": HuiNotificationItemTemplate;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PersitentNotificationEntity } from \"../../data/persistent_notification\";\n\n@customElement(\"configurator-notification-item\")\nexport class HuiConfiguratorNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersitentNotificationEntity;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">${this.hass.localize(\"domain.configurator\")}</span>\n\n        <div>\n          ${this.hass.localize(\n            \"ui.notification_drawer.click_to_configure\",\n            \"entity\",\n            this.notification.attributes.friendly_name\n          )}\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleClick}\"\n          >${this.hass.localize(\n            `state.configurator.${this.notification.state}`\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this.notification!.entity_id,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"configurator-notification-item\": HuiConfiguratorNotificationItem;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\n\nimport \"../../components/ha-relative-time\";\nimport \"../../components/ha-markdown\";\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"persistent-notification-item\")\nexport class HuiPersistentNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersistentNotification;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">\n          ${this.notification.title || this.notification.notification_id}\n        </span>\n\n        <ha-markdown content=\"${this.notification.message}\"></ha-markdown>\n\n        <div class=\"time\">\n          <span>\n            <ha-relative-time\n              .hass=\"${this.hass}\"\n              .datetime=\"${this.notification.created_at}\"\n            ></ha-relative-time>\n            <paper-tooltip\n              >${this._computeTooltip(\n                this.hass,\n                this.notification\n              )}</paper-tooltip\n            >\n          </span>\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleDismiss}\"\n          >${this.hass.localize(\n            \"ui.card.persistent_notification.dismiss\"\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .time {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 6px;\n      }\n      ha-relative-time {\n        color: var(--secondary-text-color);\n      }\n      a {\n        color: var(--primary-color);\n      }\n      ha-markdown {\n        overflow-wrap: break-word;\n      }\n    `;\n  }\n\n  private _handleDismiss(): void {\n    this.hass!.callService(\"persistent_notification\", \"dismiss\", {\n      notification_id: this.notification!.notification_id,\n    });\n  }\n\n  private _computeTooltip(\n    hass: HomeAssistant,\n    notification: PersistentNotification\n  ): string | undefined {\n    if (!hass || !notification) {\n      return undefined;\n    }\n\n    const d = new Date(notification.created_at!);\n    return d.toLocaleDateString(hass.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      minute: \"numeric\",\n      hour: \"numeric\",\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"persistent-notification-item\": HuiPersistentNotificationItem;\n  }\n}\n","import {\n  LitElement,\n  property,\n  customElement,\n  PropertyValues,\n  TemplateResult,\n  html,\n} from \"lit-element\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n\nimport \"./configurator-notification-item\";\nimport \"./persistent-notification-item\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"notification-item\")\nexport class HuiNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: HassEntity | PersistentNotification;\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (!this.hass || !this.notification || changedProps.has(\"notification\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return \"entity_id\" in this.notification\n      ? html`\n          <configurator-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></configurator-notification-item>\n        `\n      : html`\n          <persistent-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></persistent-notification-item>\n        `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item\": HuiNotificationItem;\n  }\n}\n","import \"@polymer/paper-icon-button/paper-icon-button\";\nimport { Constructor } from \"../types\";\n// Not duplicate, this is for typing.\n// tslint:disable-next-line\nimport { PaperIconButtonElement } from \"@polymer/paper-icon-button/paper-icon-button\";\n\nconst paperIconButtonClass = customElements.get(\n  \"paper-icon-button\"\n) as Constructor<PaperIconButtonElement>;\n\nexport class HaPaperIconButtonPrev extends paperIconButtonClass {\n  public connectedCallback() {\n    super.connectedCallback();\n\n    // wait to check for direction since otherwise direction is wrong even though top level is RTL\n    setTimeout(() => {\n      this.icon =\n        window.getComputedStyle(this).direction === \"ltr\"\n          ? \"hass:chevron-left\"\n          : \"hass:chevron-right\";\n    }, 100);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-icon-button-prev\": HaPaperIconButtonPrev;\n  }\n}\n\ncustomElements.define(\"ha-paper-icon-button-prev\", HaPaperIconButtonPrev);\n","import \"@polymer/app-layout/app-drawer/app-drawer\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\n\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"./notification-item\";\nimport \"../../components/ha-paper-icon-button-prev\";\n\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport { subscribeNotifications } from \"../../data/persistent_notification\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\n/*\n * @appliesMixin EventsMixin\n * @appliesMixin LocalizeMixin\n */\nexport class HuiNotificationDrawer extends EventsMixin(\n  LocalizeMixin(PolymerElement)\n) {\n  static get template() {\n    return html`\n    <style include=\"paper-material-styles\">\n      app-toolbar {\n        color: var(--primary-text-color);\n        border-bottom: 1px solid var(--divider-color);\n        background-color: var(--primary-background-color);\n        min-height: 64px;\n        width: calc(100% - 32px);\n      }\n\n      .notifications {\n        overflow-y: auto;\n        padding-top: 16px;\n        height: calc(100% - 65px);\n        box-sizing: border-box;\n        background-color: var(--primary-background-color);\n        color: var(--primary-text-color);\n      }\n\n      .notification {\n        padding: 0 16px 16px;\n      }\n\n      .empty {\n        padding: 16px;\n        text-align: center;\n      }\n    </style>\n    <app-drawer id='drawer' opened=\"{{open}}\" disable-swipe align=\"start\">\n      <app-toolbar>\n        <div main-title>[[localize('ui.notification_drawer.title')]]</div>\n        <!--IoB-->\n        <template is=\"dom-if\" if=\"[[!_empty(_notificationsBackend)]]\">\n          <paper-icon-button\n            icon=\"hass:notification-clear-all\"\n            on-click=\"_ackAll\"\n            title=\"[[localize('ui.notification_drawer.ack_all')]]\"\n          ></paper-icon-button>\n        </template>\n        <ha-paper-icon-button-prev on-click=\"_closeDrawer\"></paper-icon-button>\n      </app-toolbar>\n      <div class=\"notifications\">\n        <template is=\"dom-if\" if=\"[[!_empty(notifications)]]\">\n          <dom-repeat items=\"[[notifications]]\">\n            <template>\n              <div class=\"notification\">\n                <notification-item hass=\"[[hass]]\" notification=\"[[item]]\"></notification-item>\n              </div>\n            </template>\n          </dom-repeat>\n        </template>\n        <template is=\"dom-if\" if=\"[[_empty(notifications)]]\">\n          <div class=\"empty\">[[localize('ui.notification_drawer.empty')]]<div>\n        </template>\n      </div>\n    </app-drawer>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      open: {\n        type: Boolean,\n        observer: \"_openChanged\",\n      },\n      notifications: {\n        type: Array,\n        computed: \"_computeNotifications(open, hass, _notificationsBackend)\",\n      },\n      _notificationsBackend: {\n        type: Array,\n        value: [],\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    window.addEventListener(\"location-changed\", () => {\n      // close drawer when we navigate away.\n      if (this.open) {\n        this.open = false;\n      }\n    });\n  }\n\n  _closeDrawer(ev) {\n    ev.stopPropagation();\n    this.open = false;\n  }\n\n  // IoB\n  async DismissAllNotifications(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n      await callback(array[index], index, array);\n    }\n  }\n  // IoB\n  _ackAll(ev) {\n    ev.stopPropagation();\n    this.hass &&\n      this._notificationsBackend &&\n      this.DismissAllNotifications(\n        this._notificationsBackend,\n        async (notification) =>\n          await this.hass.callService(\"persistent_notification\", \"dismiss\", {\n            notification_id: notification.notification_id,\n          })\n      );\n  }\n\n  _empty(notifications) {\n    return notifications.length === 0;\n  }\n\n  _openChanged(open) {\n    if (open) {\n      // Render closed then animate open\n      this._unsubNotifications = subscribeNotifications(\n        this.hass.connection,\n        (notifications) => {\n          this._notificationsBackend = notifications;\n        }\n      );\n    } else if (this._unsubNotifications) {\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n  }\n\n  _computeNotifications(open, hass, notificationsBackend) {\n    if (!open) {\n      return [];\n    }\n\n    const configuratorEntities = Object.keys(hass.states)\n      .filter((entityId) => computeDomain(entityId) === \"configurator\")\n      .map((entityId) => hass.states[entityId]);\n\n    return notificationsBackend.concat(configuratorEntities);\n  }\n\n  showDialog({ narrow }) {\n    this.style.setProperty(\n      \"--app-drawer-width\",\n      narrow ? window.innerWidth + \"px\" : \"500px\"\n    );\n    this.$.drawer.open();\n  }\n}\ncustomElements.define(\"notification-drawer\", HuiNotificationDrawer);\n","import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n/**\n * Polymer Mixin to enable a localize function powered by language/resources from hass object.\n *\n * @polymerMixin\n */\nexport default dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      static get properties() {\n        return {\n          hass: Object,\n\n          /**\n           * Translates a string to the current `language`. Any parameters to the\n           * string should be passed in order, as follows:\n           * `localize(stringKey, param1Name, param1Value, param2Name, param2Value)`\n           */\n          localize: {\n            type: Function,\n            computed: \"__computeLocalize(hass.localize)\",\n          },\n        };\n      }\n\n      __computeLocalize(localize) {\n        return localize;\n      }\n    }\n);\n","import {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`\n            <div class=\"card-header\">${this.header}</div>\n          `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ncustomElements.define(\"ha-card\", HaCard);\n","import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* @polymerMixin */\nexport const EventsMixin = dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      /**\n   * Dispatches a custom event with an optional detail value.\n   *\n   * @param {string} type Name of event type.\n   * @param {*=} detail Detail value containing event-specific\n   *   payload.\n   * @param {{ bubbles: (boolean|undefined),\n               cancelable: (boolean|undefined),\n                composed: (boolean|undefined) }=}\n    *  options Object specifying options.  These may include:\n    *  `bubbles` (boolean, defaults to `true`),\n    *  `cancelable` (boolean, defaults to false), and\n    *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n    * @return {Event} The new event that was fired.\n    */\n      fire(type, detail, options) {\n        options = options || {};\n        return fireEvent(options.node || this, type, detail, options);\n      }\n    }\n);\n","import { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport relativeTime from \"../common/datetime/relative_time\";\n\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaRelativeTime extends LocalizeMixin(PolymerElement) {\n  static get properties() {\n    return {\n      hass: Object,\n      datetime: {\n        type: String,\n        observer: \"datetimeChanged\",\n      },\n\n      datetimeObj: {\n        type: Object,\n        observer: \"datetimeObjChanged\",\n      },\n\n      parsedDateTime: Object,\n    };\n  }\n\n  constructor() {\n    super();\n    this.updateRelative = this.updateRelative.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // update every 60 seconds\n    this.updateInterval = setInterval(this.updateRelative, 60000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.updateInterval);\n  }\n\n  datetimeChanged(newVal) {\n    this.parsedDateTime = newVal ? new Date(newVal) : null;\n\n    this.updateRelative();\n  }\n\n  datetimeObjChanged(newVal) {\n    this.parsedDateTime = newVal;\n\n    this.updateRelative();\n  }\n\n  updateRelative() {\n    const root = dom(this);\n    if (!this.parsedDateTime) {\n      root.innerHTML = this.localize(\"ui.components.relative_time.never\");\n    } else {\n      root.innerHTML = relativeTime(this.parsedDateTime, this.localize);\n    }\n  }\n}\n\ncustomElements.define(\"ha-relative-time\", HaRelativeTime);\n","import { LocalizeFunc } from \"../translations/localize\";\n\n/**\n * Calculate a string representing a date object as relative time from now.\n *\n * Example output: 5 minutes ago, in 3 days.\n */\nconst tests = [60, 60, 24, 7];\nconst langKey = [\"second\", \"minute\", \"hour\", \"day\"];\n\nexport default function relativeTime(\n  dateObj: Date,\n  localize: LocalizeFunc,\n  options: {\n    compareTime?: Date;\n    includeTense?: boolean;\n  } = {}\n): string {\n  const compareTime = options.compareTime || new Date();\n  let delta = (compareTime.getTime() - dateObj.getTime()) / 1000;\n  const tense = delta >= 0 ? \"past\" : \"future\";\n  delta = Math.abs(delta);\n\n  let timeDesc;\n\n  for (let i = 0; i < tests.length; i++) {\n    if (delta < tests[i]) {\n      delta = Math.floor(delta);\n      timeDesc = localize(\n        `ui.components.relative_time.duration.${langKey[i]}`,\n        \"count\",\n        delta\n      );\n      break;\n    }\n\n    delta /= tests[i];\n  }\n\n  if (timeDesc === undefined) {\n    delta = Math.floor(delta);\n    timeDesc = localize(\n      \"ui.components.relative_time.duration.week\",\n      \"count\",\n      delta\n    );\n  }\n\n  return options.includeTense === false\n    ? timeDesc\n    : localize(`ui.components.relative_time.${tense}`, \"time\", timeDesc);\n}\n"],"sourceRoot":""}