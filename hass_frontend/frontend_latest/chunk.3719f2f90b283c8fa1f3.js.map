{"version":3,"sources":["webpack:///./src/external_app/external_events_forwarder.ts","webpack:///./src/external_app/external_messaging.ts","webpack:///./src/external_app/external_auth.ts"],"names":["externalForwardConnectionEvents","bus","window","addEventListener","ev","fireMessage","type","payload","event","detail","externalForwardHaptics","hapticType","CALLBACK_EXTERNAL_BUS","ExternalMessaging","attach","this","msg","receiveMessage","sendMessage","msgId","id","Promise","resolve","reject","commands","_sendExternal","pendingCmd","success","result","error","console","warn","externalApp","externalBus","JSON","stringify","webkit","messageHandlers","postMessage","CALLBACK_SET_TOKEN","CALLBACK_REVOKE_TOKEN","Error","ExternalAuth","Auth","constructor","hassUrl","super","clientId","refresh_token","access_token","expires_in","expires","callbackPayload","callback","callbackPromise","data","getExternalAuth","tokens","Date","now","revokeExternalAuth","createExternalAuth","auth","external"],"mappings":"0GAEO,MAAMA,EAAmCC,IAC9CC,OAAOC,iBAAiB,oBAAsBC,GAC5CH,EAAII,YAAY,CACdC,KAAM,oBACNC,QAAS,CAAEC,MAAOJ,EAAGK,YAKdC,EAA0BT,GACrCC,OAAOC,iBAAiB,SAAWC,GACjCH,EAAII,YAAY,CAAEC,KAAM,SAAUC,QAAS,CAAEI,WAAYP,EAAGK,W,wHCRhE,MAAMG,EAAwB,cAkCvB,MAAMC,EAAkB,gCAC2B,IAD3B,eAEU,IAFV,eAGd,GAERC,SACLd,EAAgCe,MAChCL,EAAuBK,MACvBb,OAAOU,GAA0BI,GAAQD,KAAKE,eAAeD,GAOxDE,YAAeF,GACpB,MAAMG,IAAUJ,KAAKI,MAKrB,OAJAH,EAAII,GAAKD,EAETJ,KAAKV,YAAYW,GAEV,IAAIK,QAAW,CAACC,EAASC,KAC9BR,KAAKS,SAASL,GAAS,CAAEG,UAASC,YAQ/BlB,YAAYW,GACZA,EAAII,KACPJ,EAAII,KAAOL,KAAKI,OAElBJ,KAAKU,cAAcT,GAGdC,eAAeD,GAMpB,MAAMU,EAAaX,KAAKS,SAASR,EAAII,IAEhCM,EAMY,WAAbV,EAAIV,OACFU,EAAIW,QACND,EAAWJ,QAAQN,EAAIY,QAEvBF,EAAWH,OAAOP,EAAIa,QARxBC,QAAQC,KAAM,0BAA0Bf,EAAII,IAatCK,cAAcT,GAKlBd,OAAO8B,YACT9B,OAAO8B,YAAYC,YAAYC,KAAKC,UAAUnB,IAE9Cd,OAAOkC,OAAQC,gBAAgBJ,YAAYK,YAAYtB,I,mDCrG7D,MAAMuB,EAAqB,uBACrBC,EAAwB,0BAkC9B,IAAKtC,OAAO8B,cAAgB9B,OAAOkC,OACjC,MAAM,IAAIK,MACR,iFAIJ,MAAMC,UAAqBC,IAGzBC,YAAYC,G,UACVC,MAAM,CACJD,UACAE,SAAU,GACVC,cAAe,GACfC,aAAc,GACdC,WAAY,EAEZC,QAAS,I,OARgB,G,EAAA,c,EAAA,M,sFAY7B,2BACE,MAAMC,EAAkB,CAAEC,SAAUd,GAE9Be,EAAkB,IAAIjC,QAC1B,CAACC,EAASC,KACRrB,OAAOqC,GAAsB,CAACZ,EAAS4B,IACrC5B,EAAUL,EAAQiC,GAAQhC,EAAOgC,WAIjC,EAEFrD,OAAO8B,YACT9B,OAAO8B,YAAYwB,gBAAgBtB,KAAKC,UAAUiB,IAElDlD,OAAOkC,OAAQC,gBAAgBmB,gBAAgBlB,YAC7Cc,GAIJ,MAAMK,QAAeH,EAErBvC,KAAKwC,KAAKN,aAAeQ,EAAOR,aAChClC,KAAKwC,KAAKJ,QAA8B,IAApBM,EAAOP,WAAoBQ,KAAKC,MAGtD,eACE,MAAMP,EAAkB,CAAEC,SAAUb,GAE9Bc,EAAkB,IAAIjC,QAAQ,CAACC,EAASC,KAC5CrB,OAAOsC,GAAyB,CAACb,EAAS4B,IACxC5B,EAAUL,EAAQiC,GAAQhC,EAAOgC,WAG/B,EAEFrD,OAAO8B,YACT9B,OAAO8B,YAAY4B,mBAAmB1B,KAAKC,UAAUiB,IAErDlD,OAAOkC,OAAQC,gBAAgBuB,mBAAmBtB,YAChDc,SAIEE,GAIH,MAAMO,EAAsBhB,IACjC,MAAMiB,EAAO,IAAIpB,EAAaG,GAQ9B,OANG3C,OAAO8B,aAAe9B,OAAO8B,YAAYC,aACzC/B,OAAOkC,QAAUlC,OAAOkC,OAAOC,gBAAgBJ,eAEhD6B,EAAKC,SAAW,IAAIlD,EACpBiD,EAAKC,SAASjD,UAETgD","file":"chunk.3719f2f90b283c8fa1f3.js","sourcesContent":["import { ExternalMessaging } from \"./external_messaging\";\n\nexport const externalForwardConnectionEvents = (bus: ExternalMessaging) => {\n  window.addEventListener(\"connection-status\", (ev) =>\n    bus.fireMessage({\n      type: \"connection-status\",\n      payload: { event: ev.detail },\n    })\n  );\n};\n\nexport const externalForwardHaptics = (bus: ExternalMessaging) =>\n  window.addEventListener(\"haptic\", (ev) =>\n    bus.fireMessage({ type: \"haptic\", payload: { hapticType: ev.detail } })\n  );\n","import {\n  externalForwardConnectionEvents,\n  externalForwardHaptics,\n} from \"./external_events_forwarder\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: ExternalError) => void;\n}\n\nexport interface InternalMessage {\n  id?: number;\n  type: string;\n  payload?: unknown;\n}\n\ninterface ExternalError {\n  code: string;\n  message: string;\n}\n\ninterface ExternalMessageResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ExternalMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: ExternalError;\n}\n\ntype ExternalMessage = ExternalMessageResult | ExternalMessageResultError;\n\nexport class ExternalMessaging {\n  public commands: { [msgId: number]: CommandInFlight } = {};\n  public cache: { [key: string]: any } = {};\n  public msgId = 0;\n\n  public attach() {\n    externalForwardConnectionEvents(this);\n    externalForwardHaptics(this);\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T>(msg: InternalMessage): Promise<T> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this.fireMessage(msg);\n\n    return new Promise<T>((resolve, reject) => {\n      this.commands[msgId] = { resolve, reject };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: InternalMessage) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: ExternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // tslint:disable-next-line: no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: InternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n","/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging, InternalMessage } from \"./external_messaging\";\n\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\n\ninterface BasePayload {\n  callback: string;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  expires_in: number;\n}\n\ndeclare global {\n  interface Window {\n    externalApp?: {\n      getExternalAuth(payload: string);\n      revokeExternalAuth(payload: string);\n      externalBus(payload: string);\n    };\n    webkit?: {\n      messageHandlers: {\n        getExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        revokeExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        externalBus: {\n          postMessage(payload: InternalMessage);\n        };\n      };\n    };\n  }\n}\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\n    \"External auth requires either externalApp or webkit defined on Window object.\"\n  );\n}\n\nclass ExternalAuth extends Auth {\n  public external?: ExternalMessaging;\n\n  constructor(hassUrl: string) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    });\n  }\n\n  public async refreshAccessToken() {\n    const callbackPayload = { callback: CALLBACK_SET_TOKEN };\n\n    const callbackPromise = new Promise<RefreshTokenResponse>(\n      (resolve, reject) => {\n        window[CALLBACK_SET_TOKEN] = (success, data) =>\n          success ? resolve(data) : reject(data);\n      }\n    );\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.getExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    const tokens = await callbackPromise;\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n  }\n\n  public async revoke() {\n    const callbackPayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    const callbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) =>\n        success ? resolve(data) : reject(data);\n    });\n\n    await 0;\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.revokeExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    await callbackPromise;\n  }\n}\n\nexport const createExternalAuth = (hassUrl: string) => {\n  const auth = new ExternalAuth(hassUrl);\n  if (\n    (window.externalApp && window.externalApp.externalBus) ||\n    (window.webkit && window.webkit.messageHandlers.externalBus)\n  ) {\n    auth.external = new ExternalMessaging();\n    auth.external.attach();\n  }\n  return auth;\n};\n"],"sourceRoot":""}