{"version":3,"sources":["webpack:///../src/error.js","webpack:///../node_modules/kind-of/index.js","webpack:///../src/constants.js","webpack:///../src/utils.js","webpack:///../src/kinds.js","webpack:///../src/types.js","webpack:///../src/superstruct.js","webpack:///../src/index.js","webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js"],"names":["StructError","TypeError","type","path","JSON","errors","Error","this","toString","Object","prototype","val","ctorName","Array","isArray","constructor","isBuffer","length","callee","err","message","indexOf","isArguments","Date","toDateString","getDate","setDate","isDate","stackTraceLimit","isError","RegExp","flags","ignoreCase","multiline","global","isRegexp","throw","return","next","isGeneratorObj","call","slice","toLowerCase","replace","name","IS_STRUCT","KIND","isStruct","value","resolveDefaults","defaults","Kind","any","schema","kindOf","tuple","list","func","object","required","union","intersection","scalar","optional","en","s","e","String","undefined","data","result","failure","reason","isValid","array","element","error","ret","i","v","r","singleE","concat","obj","ks","properties","kind","valueKeys","propertiesKeys","Set","key","fn","types","kinds","k","Math","t","Kinds","keys","values","resolved","e2","r2","struct","createSchema","Types","superstruct","config","options","Struct","TYPES","isNaN","Polymer","_template","html","is","behaviors","IronValidatableBehavior","IronControlState","observer","notify","bindValue","rows","Number","maxRows","autocomplete","autofocus","Boolean","inputmode","placeholder","readonly","minlength","maxlength","label","listeners","$","textarea","selectionStart","selectionEnd","attached","navigator","userAgent","match","style","marginLeft","validate","valid","validity","hasValidator","invalid","fire","_bindValueChanged","_valueChanged","mirror","innerHTML","_valueForMirror","_onInput","event","eventPath","dom","target","_constrain","tokens","_tokens","push","join","input","split","_updateCached","PaperInputBehavior","IronFormElementBehavior","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","setAttribute","_ariaDescribedByChanged","ariaDescribedBy","inputElement"],"mappings":"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","file":"chunk.e03a27a4f23f9f07a6a1.js","sourcesContent":["/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n    return message\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs)\n    super(message)\n\n    const { data, path, value, reason, type, errors = [] } = attrs\n    this.data = data\n    this.path = path\n    this.value = value\n    this.reason = reason\n    this.type = type\n    this.errors = errors\n\n    if (!errors.length) {\n      errors.push(this)\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {StructError}\n */\n\nexport default StructError\n","var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@'\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport { IS_STRUCT, KIND }\n","import { IS_STRUCT } from './constants'\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nexport function isStruct(value) {\n  return !!(value && value[IS_STRUCT])\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nexport function resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults\n}\n","import kindOf from 'kind-of'\n\nimport { KIND } from './constants'\nimport { isStruct, resolveDefaults } from './utils'\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name\n    this.type = type\n    this.validate = validate\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults, options) {\n  if (isStruct(schema)) {\n    return schema[KIND]\n  }\n\n  if (schema instanceof Kind) {\n    return schema\n  }\n\n  switch (kindOf(schema)) {\n    case 'array': {\n      return schema.length > 1\n        ? tuple(schema, defaults, options)\n        : list(schema, defaults, options)\n    }\n\n    case 'function': {\n      return func(schema, defaults, options)\n    }\n\n    case 'object': {\n      return object(schema, defaults, options)\n    }\n\n    case 'string': {\n      let required = true\n      let type\n\n      if (schema.endsWith('?')) {\n        required = false\n        schema = schema.slice(0, -1)\n      }\n\n      if (schema.includes('|')) {\n        const scalars = schema.split(/\\s*\\|\\s*/g)\n        type = union(scalars, defaults, options)\n      } else if (schema.includes('&')) {\n        const scalars = schema.split(/\\s*&\\s*/g)\n        type = intersection(scalars, defaults, options)\n      } else {\n        type = scalar(schema, defaults, options)\n      }\n\n      if (!required) {\n        type = optional(type, undefined, options)\n      }\n\n      return type\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(\n      `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n    )\n  } else {\n    throw new Error(`Invalid schema: ${schema}`)\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dict structs must be defined as an array with two elements, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const keys = any(schema[0], undefined, options)\n  const values = any(schema[1], undefined, options)\n  const name = 'dict'\n  const type = `dict<${keys.type},${values.type}>`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = {}\n    const errors = []\n\n    for (let k in value) {\n      const v = value[k]\n      const [e, r] = keys.validate(k)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      k = r\n      const [e2, r2] = values.validate(v)\n\n      if (e2) {\n        const allE2 = e2.errors || [e2]\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[k] = r2\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Enum structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'enum'\n  const type = schema\n    .map(s => {\n      try {\n        return JSON.stringify(s)\n      } catch (e) {\n        return String(s)\n      }\n    })\n    .join(' | ')\n\n  const validate = (value = resolveDefaults(defaults)) => {\n    return schema.includes(value)\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults, options) {\n  const e = en(schema, undefined, options)\n  const l = list([e], defaults, options)\n  return l\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Function structs must be defined as a function, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'function'\n  const type = '<function>'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const result = schema(value, data)\n    let failure = { path: [], reason: null }\n    let isValid\n\n    switch (kindOf(result)) {\n      case 'boolean': {\n        isValid = result\n        break\n      }\n      case 'string': {\n        isValid = false\n        failure.reason = result\n        break\n      }\n      case 'object': {\n        isValid = false\n        failure = { ...failure, ...result }\n        break\n      }\n      default: {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`\n          )\n        } else {\n          throw new Error(`Invalid result: ${result}`)\n        }\n      }\n    }\n\n    return isValid\n      ? [undefined, value]\n      : [{ type, value, data: value, ...failure }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults, options) {\n  const name = 'instance'\n  const type = `instance<${schema.name}>`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value instanceof schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Interface structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'interface'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = value\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  let kind\n  let struct\n  const name = 'lazy'\n  const type = `lazy...`\n  const compile = value => {\n    struct = schema()\n    kind.name = struct.kind\n    kind.type = struct.type\n    kind.validate = struct.validate\n    return kind.validate(value)\n  }\n\n  kind = new Kind(name, type, compile)\n  return kind\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dynamic structs must be defined as a function, but you passed: ${createSchema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`)\n    }\n  }\n\n  const name = 'dynamic'\n  const type = 'dynamic...'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const schema = createSchema(value, data)\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Dynamic structs must return a schema, but you passed: ${schema}`\n        )\n      } else {\n        throw new Error(`Invalid schema: ${schema}`)\n      }\n    }\n\n    const [error, result] = schema.validate(value)\n\n    if (error) {\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `List structs must be defined as an array with a single element, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const array = scalar('array', undefined, options)\n  const element = any(schema[0], undefined, options)\n  const name = 'list'\n  const type = `[${element.type}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error, result] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    value = result\n    const errors = []\n    const ret = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [e, r] = element.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults, options) {\n  const name = 'literal'\n  const type = `literal: ${JSON.stringify(schema)}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value === schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Object structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'object'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n    const valueKeys = Object.keys(value)\n    const propertiesKeys = Object.keys(properties)\n    const keys = new Set(valueKeys.concat(propertiesKeys))\n\n    keys.forEach(key => {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v }\n        errors.push(e)\n        return\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        return\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    })\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults, options) {\n  return union([schema, 'undefined'], defaults, options)\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Partial structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'partial'\n  const type = `{${ks.join()},...}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Scalar structs must be defined as a string, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const { types } = options\n  const fn = types[schema]\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `No struct validator function found for type \"${schema}\".`\n      )\n    } else {\n      throw new Error(`Invalid type: ${schema}`)\n    }\n  }\n\n  const kind = func(fn, defaults, options)\n  const name = 'scalar'\n  const type = schema\n  const validate = value => {\n    const [error, result] = kind.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Tuple structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const array = scalar('array', undefined, options)\n  const name = 'tuple'\n  const type = `[${kinds.map(k => k.type).join()}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = []\n    const errors = []\n    const length = Math.max(value.length, kinds.length)\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i]\n      const v = value[i]\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v }\n        errors.push(e)\n        continue\n      }\n\n      const [e, r] = kind.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Union structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const name = 'union'\n  const type = kinds.map(k => k.type).join(' | ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    const errors = []\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value)\n\n      if (!e) {\n        return [undefined, r]\n      }\n\n      errors.push(e)\n    }\n    errors[0].type = type\n    return errors\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Intersection structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options))\n  const name = 'intersection'\n  const type = types.map(t => t.type).join(' & ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    let v = value\n\n    for (const t of types) {\n      const [e, r] = t.validate(v)\n\n      if (e) {\n        e.type = type\n        return [e]\n      }\n\n      v = r\n    }\n\n    return [undefined, v]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic,\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Kinds\n","import kindOf from 'kind-of'\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = [\n  'arguments',\n  'array',\n  'boolean',\n  'buffer',\n  'error',\n  'float32array',\n  'float64array',\n  'function',\n  'generatorfunction',\n  'int16array',\n  'int32array',\n  'int8array',\n  'map',\n  'null',\n  'number',\n  'object',\n  'promise',\n  'regexp',\n  'set',\n  'string',\n  'symbol',\n  'uint16array',\n  'uint32array',\n  'uint8array',\n  'uint8clampedarray',\n  'undefined',\n  'weakmap',\n  'weakset',\n]\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined,\n}\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type\n})\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value)\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n","import Kinds from './kinds'\nimport StructError from './error'\nimport Types from './types'\nimport { isStruct } from './utils'\nimport { IS_STRUCT, KIND } from './constants'\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = {\n    ...Types,\n    ...(config.types || {}),\n  }\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema\n    }\n\n    const kind = Kinds.any(schema, defaults, { ...options, types })\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'The `Struct` creation function should not be used with the `new` keyword.'\n          )\n        } else {\n          throw new Error('Invalid `new` keyword!')\n        }\n      }\n\n      return Struct.assert(data)\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true })\n    Object.defineProperty(Struct, KIND, { value: kind })\n\n    Struct.kind = kind.name\n    Struct.type = kind.type\n    Struct.schema = schema\n    Struct.defaults = defaults\n    Struct.options = options\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        throw new StructError(error)\n      }\n\n      return result\n    }\n\n    Struct.test = value => {\n      const [error] = kind.validate(value)\n      return !error\n    }\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        return [new StructError(error)]\n      }\n\n      return [undefined, result]\n    }\n\n    return Struct\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name]\n\n    struct[name] = (schema, defaults, options) => {\n      const type = kind(schema, defaults, { ...options, types })\n      const s = struct(type, defaults, options)\n      return s\n    }\n  })\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default superstruct\n","import StructError from './error'\nimport superstruct from './superstruct'\nimport { isStruct } from './utils'\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct()\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport { struct, superstruct, isStruct, StructError }\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type {number}\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type {number}\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n"],"sourceRoot":""}