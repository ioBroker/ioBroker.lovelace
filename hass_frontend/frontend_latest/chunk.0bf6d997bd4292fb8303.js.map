{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack:///./src/panels/lovelace/editor/types.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-entities-card-editor.ts"],"names":["struct","superstruct","types","value","includes","icon","customElement","property","themes","concat","Object","keys","this","hass","sort","html","label","localize","_changed","map","theme","css","ev","target","fireEvent","LitElement","actionConfigStruct","action","navigation_path","url_path","service","service_data","entitiesConfigStruct","union","entity","name","cardConfigStruct","type","title","show_header_toggle","entities","HuiEntitiesCardEditor","config","_config","_configEntities","processEditorEntities","configElementStyle","_title","_valueChanged","_theme","configValue","detail","undefined","checked"],"mappings":"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","file":"chunk.0bf6d997bd4292fb8303.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"theme-changed\": undefined;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"theme-changed\": HASSDomEvent<undefined>;\n  }\n}\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n  @property() public label?: string;\n  @property() public hass?: HomeAssistant;\n\n  protected render(): TemplateResult | void {\n    const themes = [\"Backend-selected\", \"default\"].concat(\n      Object.keys(this.hass!.themes.themes).sort()\n    );\n\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n          this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.theme\") +\n            \" (\" +\n            this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            ) +\n            \")\"}\n        dynamic-align\n        @value-changed=\"${this._changed}\"\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=\"${this.value}\"\n          attr-for-selected=\"theme\"\n        >\n          ${themes.map((theme) => {\n            return html`\n              <paper-item theme=\"${theme}\">${theme}</paper-item>\n            `;\n          })}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value;\n    fireEvent(this, \"theme-changed\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import {\n  LovelaceCardConfig,\n  LovelaceViewConfig,\n  ActionConfig,\n} from \"../../../data/lovelace\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { InputType } from \"zlib\";\nimport { struct } from \"../common/structs/struct\";\n\nexport interface YamlChangedEvent extends Event {\n  detail: {\n    yaml: string;\n  };\n}\n\nexport interface ViewEditEvent extends Event {\n  detail: {\n    config: LovelaceViewConfig;\n  };\n}\n\nexport interface ConfigValue {\n  format: \"json\" | \"yaml\";\n  value?: string | LovelaceCardConfig;\n}\n\nexport interface ConfigError {\n  type: string;\n  message: string;\n}\n\nexport interface EntitiesEditorEvent {\n  detail?: {\n    entities?: EntityConfig[];\n  };\n  target?: EventTarget;\n}\n\nexport interface EditorTarget extends EventTarget {\n  value?: string;\n  index?: number;\n  checked?: boolean;\n  configValue?: string;\n  type?: InputType;\n  config: ActionConfig;\n}\n\nexport interface CardPickTarget extends EventTarget {\n  type: string;\n}\n\nexport const actionConfigStruct = struct({\n  action: \"string\",\n  navigation_path: \"string?\",\n  url_path: \"string?\",\n  service: \"string?\",\n  service_data: \"object?\",\n});\n\nexport const entitiesConfigStruct = struct.union([\n  {\n    entity: \"entity-id\",\n    name: \"string?\",\n    icon: \"icon?\",\n  },\n  \"entity-id\",\n]);\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\n\nimport \"../../../../components/entity/state-badge\";\nimport \"../../components/hui-theme-select-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-switch\";\n\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { struct } from \"../../common/structs/struct\";\nimport {\n  EntitiesEditorEvent,\n  EditorTarget,\n  entitiesConfigStruct,\n} from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport {\n  EntitiesCardConfig,\n  EntitiesCardEntityConfig,\n} from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string|number?\",\n  theme: \"string?\",\n  show_header_toggle: \"boolean?\",\n  entities: [entitiesConfigStruct],\n});\n\n@customElement(\"hui-entities-card-editor\")\nexport class HuiEntitiesCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntitiesCardConfig;\n\n  @property() private _configEntities?: EntitiesCardEntityConfig[];\n\n  public setConfig(config: EntitiesCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"Backend-selected\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=\"${this._title}\"\n          .configValue=\"${\"title\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <hui-theme-select-editor\n          .hass=\"${this.hass}\"\n          .value=\"${this._theme}\"\n          .configValue=\"${\"theme\"}\"\n          @theme-changed=\"${this._valueChanged}\"\n        ></hui-theme-select-editor>\n        <ha-switch\n          ?checked=\"${this._config!.show_header_toggle !== false}\"\n          .configValue=\"${\"show_header_toggle\"}\"\n          @change=\"${this._valueChanged}\"\n          >${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.entities.show_header_toggle\"\n          )}</ha-switch\n        >\n      </div>\n      <hui-entity-editor\n        .hass=\"${this.hass}\"\n        .entities=\"${this._configEntities}\"\n        @entities-changed=\"${this._valueChanged}\"\n      ></hui-entity-editor>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n\n    if (\n      (target.configValue! === \"title\" && target.value === this._title) ||\n      (target.configValue! === \"theme\" && target.value === this._theme)\n    ) {\n      return;\n    }\n\n    if (ev.detail && ev.detail.entities) {\n      this._config.entities = ev.detail.entities;\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue]:\n            target.checked !== undefined ? target.checked : target.value,\n        };\n      }\n    }\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card-editor\": HuiEntitiesCardEditor;\n  }\n}\n"],"sourceRoot":""}