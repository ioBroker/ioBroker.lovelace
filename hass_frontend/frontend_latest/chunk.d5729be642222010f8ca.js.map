{"version":3,"sources":["webpack:///./src/mixins/localize-mixin.js","webpack:///./src/components/ha-card.ts","webpack:///./src/mixins/events-mixin.js","webpack:///./src/panels/calendar/ha-big-calendar.js","webpack:///./src/panels/calendar/ha-panel-calendar.js"],"names":["dedupingMixin","superClass","hass","Object","localize","type","Function","computed","__computeLocalize","HaCard","property","css","html","this","header","LitElement","customElements","define","EventsMixin","fire","detail","options","fireEvent","node","BigCalendar","setLocalizer","momentLocalizer","moment","DEFAULT_VIEW","HaBigCalendar","PolymerElement","events","Array","observer","_update","allViews","Views","values","BCElement","React","createElement","views","popup","onNavigate","date","viewName","onView","eventPropGetter","_setEventStyle","defaultView","defaultDate","Date","render","$","root","event","newStyle","color","backgroundColor","style","HaPanelCalendar","LocalizeMixin","currentView","String","value","currentDate","calendars","selectedCalendars","narrow","Boolean","reflectToAttribute","connectedCallback","super","_fetchCalendars","callApi","then","result","map","cal","entity_id","_fetchData","start","dates","firstVisibleDay","toISOString","end","lastVisibleDay","params","encodeURI","calls","Promise","all","results","tmpEvents","forEach","res","ev","push","_getDateRange","startDate","endDate","startOf","endOf","subtract","add","_handleViewChanged","_handleNavigate"],"mappings":"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","file":"chunk.d5729be642222010f8ca.js","sourcesContent":["import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n/**\n * Polymer Mixin to enable a localize function powered by language/resources from hass object.\n *\n * @polymerMixin\n */\nexport default dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      static get properties() {\n        return {\n          hass: Object,\n\n          /**\n           * Translates a string to the current `language`. Any parameters to the\n           * string should be passed in order, as follows:\n           * `localize(stringKey, param1Name, param1Value, param2Name, param2Value)`\n           */\n          localize: {\n            type: Function,\n            computed: \"__computeLocalize(hass.localize)\",\n          },\n        };\n      }\n\n      __computeLocalize(localize) {\n        return localize;\n      }\n    }\n);\n","import {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`\n            <div class=\"card-header\">${this.header}</div>\n          `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ncustomElements.define(\"ha-card\", HaCard);\n","import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* @polymerMixin */\nexport const EventsMixin = dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      /**\n   * Dispatches a custom event with an optional detail value.\n   *\n   * @param {string} type Name of event type.\n   * @param {*=} detail Detail value containing event-specific\n   *   payload.\n   * @param {{ bubbles: (boolean|undefined),\n               cancelable: (boolean|undefined),\n                composed: (boolean|undefined) }=}\n    *  options Object specifying options.  These may include:\n    *  `bubbles` (boolean, defaults to `true`),\n    *  `cancelable` (boolean, defaults to false), and\n    *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n    * @return {Event} The new event that was fired.\n    */\n      fire(type, detail, options) {\n        options = options || {};\n        return fireEvent(options.node || this, type, detail, options);\n      }\n    }\n);\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\n/* eslint-disable */\nimport { render } from \"react-dom\";\nimport React from \"react\";\n/* eslint-enable */\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\n\nimport \"../../resources/ha-style\";\n\nBigCalendar.setLocalizer(BigCalendar.momentLocalizer(moment));\n\nconst DEFAULT_VIEW = \"month\";\n\nclass HaBigCalendar extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <link\n        rel=\"stylesheet\"\n        href=\"/static/panels/calendar/react-big-calendar.css\"\n      />\n      <style>\n        div#root {\n          height: 100%;\n          width: 100%;\n        }\n      </style>\n      <div id=\"root\"></div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      events: {\n        type: Array,\n        observer: \"_update\",\n      },\n    };\n  }\n\n  _update(events) {\n    const allViews = BigCalendar.Views.values;\n\n    const BCElement = React.createElement(BigCalendar, {\n      events: events,\n      views: allViews,\n      popup: true,\n      onNavigate: (date, viewName) => this.fire(\"navigate\", { date, viewName }),\n      onView: (viewName) => this.fire(\"view-changed\", { viewName }),\n      eventPropGetter: this._setEventStyle,\n      defaultView: DEFAULT_VIEW,\n      defaultDate: new Date(),\n    });\n    render(BCElement, this.$.root);\n  }\n\n  _setEventStyle(event) {\n    // https://stackoverflow.com/questions/34587067/change-color-of-react-big-calendar-events\n    const newStyle = {};\n    if (event.color) {\n      newStyle.backgroundColor = event.color;\n    }\n    return { style: newStyle };\n  }\n}\n\ncustomElements.define(\"ha-big-calendar\", HaBigCalendar);\n","import \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-checkbox/paper-checkbox\";\nimport \"@polymer/paper-item/paper-item\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport moment from \"moment\";\nimport dates from \"react-big-calendar/lib/utils/dates\";\n\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-card\";\nimport \"../../resources/ha-style\";\nimport \"./ha-big-calendar\";\n\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\n\nconst DEFAULT_VIEW = \"month\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPanelCalendar extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex ha-style\">\n        .content {\n          padding: 16px;\n          @apply --layout-horizontal;\n        }\n\n        ha-big-calendar {\n          min-height: 500px;\n          min-width: 100%;\n        }\n\n        #calendars {\n          padding-right: 16px;\n          width: 15%;\n          min-width: 170px;\n        }\n\n        paper-item {\n          cursor: pointer;\n        }\n\n        div.all_calendars {\n          ￼height: 20px;\n          ￼text-align: center;\n        }\n\n        .iron-selected {\n          background-color: #e5e5e5;\n          font-weight: normal;\n        }\n\n        :host([narrow]) .content {\n          flex-direction: column;\n        }\n        :host([narrow]) #calendars {\n          margin-bottom: 24px;\n          width: 100%;\n        }\n      </style>\n\n      <app-header-layout has-scrolling-region>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              hass=\"[[hass]]\"\n              narrow=\"[[narrow]]\"\n            ></ha-menu-button>\n            <div main-title>[[localize('panel.calendar')]]</div>\n          </app-toolbar>\n        </app-header>\n\n        <div class=\"flex content\">\n          <div id=\"calendars\" class=\"layout vertical wrap\">\n            <ha-card header=\"Calendars\">\n              <paper-listbox\n                id=\"calendar_list\"\n                multi\n                on-selected-items-changed=\"_fetchData\"\n                selected-values=\"{{selectedCalendars}}\"\n                attr-for-selected=\"item-name\"\n              >\n                <template is=\"dom-repeat\" items=\"[[calendars]]\">\n                  <paper-item item-name=\"[[item.entity_id]]\">\n                    <span\n                      class=\"calendar_color\"\n                      style$=\"background-color: [[item.color]]\"\n                    ></span>\n                    <span class=\"calendar_color_spacer\"></span> [[item.name]]\n                  </paper-item>\n                </template>\n              </paper-listbox>\n            </ha-card>\n          </div>\n          <div class=\"flex layout horizontal wrap\">\n            <ha-big-calendar\n              default-date=\"[[currentDate]]\"\n              default-view=\"[[currentView]]\"\n              on-navigate=\"_handleNavigate\"\n              on-view=\"_handleViewChanged\"\n              events=\"[[events]]\"\n            >\n            </ha-big-calendar>\n          </div>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n\n      currentView: {\n        type: String,\n        value: DEFAULT_VIEW,\n      },\n\n      currentDate: {\n        type: Object,\n        value: new Date(),\n      },\n\n      events: {\n        type: Array,\n        value: [],\n      },\n\n      calendars: {\n        type: Array,\n        value: [],\n      },\n\n      selectedCalendars: {\n        type: Array,\n        value: [],\n      },\n\n      narrow: {\n        type: Boolean,\n        reflectToAttribute: true,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this._fetchCalendars();\n  }\n\n  _fetchCalendars() {\n    this.hass.callApi(\"get\", \"calendars\").then((result) => {\n      this.calendars = result;\n      this.selectedCalendars = result.map((cal) => cal.entity_id);\n    });\n  }\n\n  _fetchData() {\n    const start = dates.firstVisibleDay(this.currentDate).toISOString();\n    const end = dates.lastVisibleDay(this.currentDate).toISOString();\n    const params = encodeURI(`?start=${start}&end=${end}`);\n    const calls = this.selectedCalendars.map((cal) =>\n      this.hass.callApi(\"get\", `calendars/${cal}${params}`)\n    );\n    Promise.all(calls).then((results) => {\n      const tmpEvents = [];\n\n      results.forEach((res) => {\n        res.forEach((ev) => {\n          ev.start = new Date(ev.start);\n          if (ev.end) {\n            ev.end = new Date(ev.end);\n          } else {\n            ev.end = null;\n          }\n          tmpEvents.push(ev);\n        });\n      });\n      this.events = tmpEvents;\n    });\n  }\n\n  _getDateRange() {\n    let startDate;\n    let endDate;\n    if (this.currentView === \"day\") {\n      startDate = moment(this.currentDate).startOf(\"day\");\n      endDate = moment(this.currentDate).startOf(\"day\");\n    } else if (this.currentView === \"week\") {\n      startDate = moment(this.currentDate).startOf(\"isoWeek\");\n      endDate = moment(this.currentDate).endOf(\"isoWeek\");\n    } else if (this.currentView === \"month\") {\n      startDate = moment(this.currentDate)\n        .startOf(\"month\")\n        .subtract(7, \"days\");\n      endDate = moment(this.currentDate)\n        .endOf(\"month\")\n        .add(7, \"days\");\n    } else if (this.currentView === \"agenda\") {\n      startDate = moment(this.currentDate).startOf(\"day\");\n      endDate = moment(this.currentDate)\n        .endOf(\"day\")\n        .add(1, \"month\");\n    }\n    return [startDate.toISOString(), endDate.toISOString()];\n  }\n\n  _handleViewChanged(ev) {\n    // Calendar view changed\n    this.currentView = ev.detail.viewName;\n    this._fetchData();\n  }\n\n  _handleNavigate(ev) {\n    // Calendar date range changed\n    this.currentDate = ev.detail.date;\n    this.currentView = ev.detail.viewName;\n    this._fetchData();\n  }\n}\n\ncustomElements.define(\"ha-panel-calendar\", HaPanelCalendar);\n"],"sourceRoot":""}