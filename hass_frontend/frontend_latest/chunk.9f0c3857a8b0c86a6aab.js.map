{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-plant-status-card-editor.ts"],"names":["struct","superstruct","types","value","includes","icon","rowRenderer","root","_owner","model","firstElementChild","innerHTML","querySelector","stateObj","item","textContent","computeStateName","entity_id","HaEntityPicker","property","type","Boolean","attribute","Array","memoizeOne","hass","includeDomains","excludeDomains","entityFilter","includeDeviceClasses","states","entityIds","Object","keys","filter","eid","computeDomain","sort","map","key","this","attributes","device_class","changedProps","has","_opened","_hass","_getStates","html","_value","allowCustomEntity","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","_clearValue","length","ev","stopPropagation","_setValue","detail","newValue","setTimeout","fireEvent","css","LitElement","customElements","define","customElement","themes","concat","_changed","theme","target","configElementStyle","cardConfigStruct","entity","name","HuiPlantStatusCardEditor","config","_config","_entity","_name","_theme","configValue"],"mappings":"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","file":"chunk.9f0c3857a8b0c86a6aab.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (includeDeviceClasses) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class))\n        );\n      }\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    const states = this._getStates(\n      this._hass,\n      this.includeDomains,\n      this.excludeDomains,\n      this.entityFilter,\n      this.includeDeviceClasses\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  aria-label=${this.hass!.localize(\n                    \"ui.components.entity.entity-picker.clear\"\n                  )}\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  @click=${this._clearValue}\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  aria-label=${this.hass!.localize(\n                    \"ui.components.entity.entity-picker.show_entities\"\n                  )}\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    this._setValue(\"\");\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"theme-changed\": undefined;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"theme-changed\": HASSDomEvent<undefined>;\n  }\n}\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n  @property() public label?: string;\n  @property() public hass?: HomeAssistant;\n\n  protected render(): TemplateResult | void {\n    const themes = [\"Backend-selected\", \"default\"].concat(\n      Object.keys(this.hass!.themes.themes).sort()\n    );\n\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n          this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.theme\") +\n            \" (\" +\n            this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            ) +\n            \")\"}\n        dynamic-align\n        @value-changed=\"${this._changed}\"\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=\"${this.value}\"\n          attr-for-selected=\"theme\"\n        >\n          ${themes.map((theme) => {\n            return html`\n              <paper-item theme=\"${theme}\">${theme}</paper-item>\n            `;\n          })}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value;\n    fireEvent(this, \"theme-changed\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    ha-switch {\n      padding: 16px 0;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-icon\";\nimport \"../../components/hui-theme-select-editor\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { PlantStatusCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  entity: \"string\",\n  name: \"string?\",\n  theme: \"string?\",\n});\n\n@customElement(\"hui-plant-status-card-editor\")\nexport class HuiPlantStatusCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: PlantStatusCardConfig;\n\n  public setConfig(config: PlantStatusCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"Backend-selected\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=\"${this.hass}\"\n          .value=\"${this._entity}\"\n          .configValue=${\"entity\"}\n          include-domains='[\"plant\"]'\n          @change=\"${this._valueChanged}\"\n          allow-custom-entity\n        ></ha-entity-picker>\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.name\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=\"${this._name}\"\n          .configValue=\"${\"name\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <hui-theme-select-editor\n          .hass=\"${this.hass}\"\n          .value=\"${this._theme}\"\n          .configValue=\"${\"theme\"}\"\n          @theme-changed=\"${this._valueChanged}\"\n        ></hui-theme-select-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-plant-status-card-editor\": HuiPlantStatusCardEditor;\n  }\n}\n"],"sourceRoot":""}