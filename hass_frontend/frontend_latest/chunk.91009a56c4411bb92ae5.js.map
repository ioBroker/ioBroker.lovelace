{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-toast/paper-toast.js","webpack:///./src/components/ha-toast.ts","webpack:///./src/managers/notification-manager.ts","webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js","webpack:///./node_modules/@polymer/iron-resizable-behavior/iron-resizable-behavior.js"],"names":["currentToast","Polymer","_template","html","is","behaviors","IronOverlayBehavior","properties","fitInto","type","Object","value","window","observer","horizontalAlign","String","verticalAlign","duration","Number","text","noCancelOnOutsideClick","Boolean","noAutoFocus","listeners","Base","_warn","this","opened","Infinity","created","_autoClose","IronA11yAnnouncer","requestAvailability","show","property","indexOf","open","hide","close","__onTransitionEnd","e","target","propertyName","_finishRenderOpened","_finishRenderClosed","_openedChanged","cancelAsync","fire","_canAutoClose","async","IronOverlayBehaviorImpl","apply","arguments","_renderOpened","classList","add","_renderClosed","remove","_onFitIntoChanged","positionTarget","PaperToast","customElements","get","define","connectedCallback","super","_resizeListener","ev","toggle","matches","_mediaq","matchMedia","addListener","disconnectedCallback","removeListener","NotificationManager","query","message","action","dismissable","toast","_toast","updateComplete","setAttribute","computeRTL","hass","_action","undefined","_noCancelOnOutsideClick","buttonClicked","css","LitElement","mode","_text","instance","document","body","addEventListener","_onIronAnnounce","bind","announce","event","detail","createElement","appendChild","ORPHANS","Set","IronResizableBehavior","_parentResizable","_notifyingDescendant","_interestedResizables","_boundNotifyResize","notifyResize","_boundOnDescendantIronResize","_onDescendantIronResize","attached","_requestResizeNotifications","detached","stopResizeNotificationsFor","delete","removeEventListener","isAttached","forEach","resizable","resizerShouldNotify","_notifyDescendant","_fireResize","assignParentResizable","parentResizable","push","_subscribeIronResize","index","splice","_unsubscribeIronResize","element","stopPropagation","useShadow","node","bubbles","_onIronRequestResizeNotifications","dom","rootTarget","_parentResizableChanged","descendant","readyState","readystatechanged","_findParent","orphan","cancelable"],"mappings":"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","file":"chunk.91009a56c4411bb92ae5.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronOverlayBehavior, IronOverlayBehaviorImpl} from '@polymer/iron-overlay-behavior/iron-overlay-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n// Keeps track of the toast currently opened.\nvar currentToast = null;\n\n/**\nMaterial design: [Snackbars &\ntoasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    <paper-toast text=\"Hello world!\" opened></paper-toast>\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    <paper-button on-click=\"openToast\">Open Toast</paper-button>\n    <paper-toast id=\"toast\" text=\"Hello world!\"></paper-toast>\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on\nscreen:\n\nExample:\n\n    <paper-toast text=\"Terms and conditions\" opened duration=\"0\">\n      <a href=\"#\">Show more</a>\n    </paper-toast>\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.\n\n@group Paper Elements\n@element paper-toast\n@demo demo/index.html\n@hero hero.svg\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        position: fixed;\n        background-color: var(--paper-toast-background-color, #323232);\n        color: var(--paper-toast-color, #f1f1f1);\n        min-height: 48px;\n        min-width: 288px;\n        padding: 16px 24px;\n        box-sizing: border-box;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n        border-radius: 2px;\n        margin: 12px;\n        font-size: 14px;\n        cursor: default;\n        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        opacity: 0;\n        -webkit-transform: translateY(100px);\n        transform: translateY(100px);\n        @apply --paper-font-common-base;\n      }\n\n      :host(.capsule) {\n        border-radius: 24px;\n      }\n\n      :host(.fit-bottom) {\n        width: 100%;\n        min-width: 0;\n        border-radius: 0;\n        margin: 0;\n      }\n\n      :host(.paper-toast-open) {\n        opacity: 1;\n        -webkit-transform: translateY(0px);\n        transform: translateY(0px);\n      }\n    </style>\n\n    <span id=\"label\">{{text}}</span>\n    <slot></slot>\n`,\n\n  is: 'paper-toast',\n  behaviors: [IronOverlayBehavior],\n\n  properties: {\n    /**\n     * The element to fit `this` into.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    fitInto: {type: Object, value: window, observer: '_onFitIntoChanged'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * horizontally relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    horizontalAlign: {type: String, value: 'left'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * vertically relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    verticalAlign: {type: String, value: 'bottom'},\n\n    /**\n     * The duration in milliseconds to show the toast.\n     * Set to `0`, a negative number, or `Infinity`, to disable the\n     * toast auto-closing.\n     */\n    duration: {type: Number, value: 3000},\n\n    /**\n     * The text to display in the toast.\n     */\n    text: {type: String, value: ''},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to false to enable closing of the toast by clicking outside it.\n     */\n    noCancelOnOutsideClick: {type: Boolean, value: true},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to true to disable auto-focusing the toast or child nodes with\n     * the `autofocus` attribute` when the overlay is opened.\n     */\n    noAutoFocus: {type: Boolean, value: true}\n  },\n\n  listeners: {'transitionend': '__onTransitionEnd'},\n\n  /**\n   * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.\n   * @property visible\n   * @deprecated\n   */\n  get visible() {\n    Base._warn('`visible` is deprecated, use `opened` instead');\n    return this.opened;\n  },\n\n  /**\n   * Read-only. Can auto-close if duration is a positive finite number.\n   * @property _canAutoClose\n   */\n  get _canAutoClose() {\n    return this.duration > 0 && this.duration !== Infinity;\n  },\n\n  created: function() {\n    this._autoClose = null;\n    IronA11yAnnouncer.requestAvailability();\n  },\n\n  /**\n   * Show the toast. Without arguments, this is the same as `open()` from\n   * `IronOverlayBehavior`.\n   * @param {(Object|string)=} properties Properties to be set before opening the toast.\n   * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`\n   */\n  show: function(properties) {\n    if (typeof properties == 'string') {\n      properties = {text: properties};\n    }\n    for (var property in properties) {\n      if (property.indexOf('_') === 0) {\n        Base._warn(\n            'The property \"' + property + '\" is private and was not set.');\n      } else if (property in this) {\n        this[property] = properties[property];\n      } else {\n        Base._warn('The property \"' + property + '\" is not valid.');\n      }\n    }\n    this.open();\n  },\n\n  /**\n   * Hide the toast. Same as `close()` from `IronOverlayBehavior`.\n   */\n  hide: function() {\n    this.close();\n  },\n\n  /**\n   * Called on transitions of the toast, indicating a finished animation\n   * @private\n   */\n  __onTransitionEnd: function(e) {\n    // there are different transitions that are happening when opening and\n    // closing the toast. The last one so far is for `opacity`.\n    // This marks the end of the transition, so we check for this to determine\n    // if this is the correct event.\n    if (e && e.target === this && e.propertyName === 'opacity') {\n      if (this.opened) {\n        this._finishRenderOpened();\n      } else {\n        this._finishRenderClosed();\n      }\n    }\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   * Called when the value of `opened` changes.\n   */\n  _openedChanged: function() {\n    if (this._autoClose !== null) {\n      this.cancelAsync(this._autoClose);\n      this._autoClose = null;\n    }\n    if (this.opened) {\n      if (currentToast && currentToast !== this) {\n        currentToast.close();\n      }\n      currentToast = this;\n      this.fire('iron-announce', {text: this.text});\n      if (this._canAutoClose) {\n        this._autoClose = this.async(this.close, this.duration);\n      }\n    } else if (currentToast === this) {\n      currentToast = null;\n    }\n    IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderOpened: function() {\n    this.classList.add('paper-toast-open');\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderClosed: function() {\n    this.classList.remove('paper-toast-open');\n  },\n\n  /**\n   * @private\n   */\n  _onFitIntoChanged: function(fitInto) {\n    this.positionTarget = fitInto;\n  }\n\n  /**\n   * Fired when `paper-toast` is opened.\n   *\n   * @event 'iron-announce'\n   * @param {{text: string}} detail Contains text that will be announced.\n   */\n});\n","import \"@polymer/paper-toast/paper-toast\";\n\n// tslint:disable-next-line\nconst PaperToast = customElements.get(\"paper-toast\");\n\nexport class HaToast extends PaperToast {\n  private _resizeListener?: (obj: { matches: boolean }) => unknown;\n  private _mediaq?: MediaQueryList;\n\n  public connectedCallback() {\n    super.connectedCallback();\n\n    if (!this._resizeListener) {\n      this._resizeListener = (ev) =>\n        this.classList.toggle(\"fit-bottom\", ev.matches);\n      this._mediaq = window.matchMedia(\"(max-width: 599px\");\n    }\n    this._mediaq!.addListener(this._resizeListener);\n    this._resizeListener(this._mediaq!);\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._mediaq!.removeListener(this._resizeListener!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-toast\": HaToast;\n  }\n}\n\ncustomElements.define(\"ha-toast\", HaToast);\n","import {\n  LitElement,\n  query,\n  property,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport { HomeAssistant } from \"../types\";\nimport \"@material/mwc-button\";\nimport \"../components/ha-toast\";\n// Typing\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaToast } from \"../components/ha-toast\";\n\nexport interface ShowToastParams {\n  message: string;\n  action?: ToastActionParams;\n  duration?: number;\n  dismissable?: boolean;\n}\n\nexport interface ToastActionParams {\n  action: () => void;\n  text: string;\n}\n\nclass NotificationManager extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _action?: ToastActionParams;\n  @property() private _noCancelOnOutsideClick: boolean = false;\n\n  @query(\"ha-toast\") private _toast!: HaToast;\n\n  public async showDialog({\n    message,\n    action,\n    duration,\n    dismissable,\n  }: ShowToastParams) {\n    let toast = this._toast;\n    // Can happen on initial load\n    if (!toast) {\n      await this.updateComplete;\n      toast = this._toast;\n    }\n    toast.setAttribute(\"dir\", computeRTL(this.hass) ? \"rtl\" : \"ltr\");\n    this._action = action || undefined;\n    this._noCancelOnOutsideClick =\n      dismissable === undefined ? false : !dismissable;\n    toast.hide();\n    toast.show({\n      text: message,\n      duration: duration === undefined ? 3000 : duration,\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-toast .noCancelOnOutsideClick=${this._noCancelOnOutsideClick}>\n        ${this._action\n          ? html`\n              <mwc-button\n                .label=${this._action.text}\n                @click=${this.buttonClicked}\n              ></mwc-button>\n            `\n          : \"\"}\n      </ha-toast>\n    `;\n  }\n\n  private buttonClicked() {\n    this._toast.hide();\n    if (this._action) {\n      this._action.action();\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      mwc-button {\n        color: var(--primary-color);\n        font-weight: bold;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"notification-manager\", NotificationManager);\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"hass-notification\": ShowToastParams;\n  }\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {useShadow} from '@polymer/polymer/lib/utils/settings.js';\n\n// Contains all connected resizables that do not have a parent.\nvar ORPHANS = new Set();\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that\n *control the size or hidden state of their children) and \"resizables\" (elements\n *that need to be notified when they are resized or un-hidden by their parents\n *in order to take action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior`\n *behavior to their element definition and listen for the `iron-resize` event on\n *themselves. This event will be fired when they become showing after having\n *been hidden, when they are resized explicitly by another resizable, or when\n *the window has been resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior\n * @demo demo/index.html\n **/\nexport const IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged',\n    },\n\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false,\n    }\n  },\n\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n\n  created: function() {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);\n  },\n\n  attached: function() {\n    this._requestResizeNotifications();\n  },\n\n  detached: function() {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      ORPHANS.delete(this);\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n\n    this._parentResizable = null;\n  },\n\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._interestedResizables.forEach(function(resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n\n    this._fireResize();\n  },\n\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function(parentResizable) {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    }\n\n    this._parentResizable = parentResizable;\n\n    if (parentResizable &&\n        parentResizable._interestedResizables.indexOf(this) === -1) {\n      parentResizable._interestedResizables.push(this);\n      parentResizable._subscribeIronResize(this);\n    }\n  },\n\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function(target) {\n    var index = this._interestedResizables.indexOf(target);\n\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this._unsubscribeIronResize(target);\n    }\n  },\n\n  /**\n   * Subscribe this element to listen to iron-resize events on the given target.\n   *\n   * Preferred over target.listen because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _subscribeIronResize: function(target) {\n    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * Unsubscribe this element from listening to to iron-resize events on the\n   * given target.\n   *\n   * Preferred over target.unlisten because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _unsubscribeIronResize: function(target) {\n    target.removeEventListener(\n        'iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function(element) {\n    return true;\n  },\n\n  _onDescendantIronResize: function(event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // no need to use this during shadow dom because of event retargeting\n    if (!useShadow) {\n      this._fireResize();\n    }\n  },\n\n  _fireResize: function() {\n    this.fire('iron-resize', null, {node: this, bubbles: false});\n  },\n\n  _onIronRequestResizeNotifications: function(event) {\n    var target = /** @type {!EventTarget} */ (dom(event).rootTarget);\n    if (target === this) {\n      return;\n    }\n\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n\n    event.stopPropagation();\n  },\n\n  _parentResizableChanged: function(parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n\n  _notifyDescendant: function(descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n\n  _requestResizeNotifications: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications =\n          this._requestResizeNotifications.bind(this);\n      document.addEventListener(\n          'readystatechange', function readystatechanged() {\n            document.removeEventListener('readystatechange', readystatechanged);\n            _requestResizeNotifications();\n          });\n    } else {\n      this._findParent();\n\n      if (!this._parentResizable) {\n        // If this resizable is an orphan, tell other orphans to try to find\n        // their parent again, in case it's this resizable.\n        ORPHANS.forEach(function(orphan) {\n          if (orphan !== this) {\n            orphan._findParent();\n          }\n        }, this);\n\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      } else {\n        // If this resizable has a parent, tell other child resizables of\n        // that parent to try finding their parent again, in case it's this\n        // resizable.\n        this._parentResizable._interestedResizables\n            .forEach(function(resizable) {\n              if (resizable !== this) {\n                resizable._findParent();\n              }\n            }, this);\n      }\n    }\n  },\n\n  _findParent: function() {\n    this.assignParentResizable(null);\n    this.fire(\n        'iron-request-resize-notifications',\n        null,\n        {node: this, bubbles: true, cancelable: true});\n\n    if (!this._parentResizable) {\n      ORPHANS.add(this);\n    } else {\n      ORPHANS.delete(this);\n    }\n  }\n};\n"],"sourceRoot":""}